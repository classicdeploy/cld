#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Main cloud manager KVM create utility - if some required arguments is not enough will activate interactive mode
EOL
)
HELP_ARGS=$(cat << 'EOL'
--os=CENTOS8                       Operational system - CENTOS6/7/8 DEBIAN9/10 UBUNTU16/18 FEDORA28 FREEBSD
--template=sentry                  Template application name - blank if clean install is required                        
--name=srv1.example.com            Name of new kvm instance
--cpu=2                            Amount of CPU Cores
--ram=2                            Amount of RAM in GB
--disk=20                          Amount of Disk space in GB
--ip=1.2.3.4                       IPv4 address
--mac=00:00:06:00:00:00            MAC address - leave it blank to generate automatically
--gate=1.2.3.1                     Gateway address for your IPv4 IP address
--netmask=255.255.255.0            Netmask
--id=10001                         Internal PVE KVM id should not be the same as any existing KVM for all you hypervisors
--password=Y0uRpA5Sw0Rd            Password for root user of the KVM
--storage=zfs01                    PVE storage on the target hypervisor
--storagetype=zfs                  Storage type - zfs/lvm/qcow2
--autologin=0                      Autologin to root user for serial consone - 0 is disabled - 1 is enabled
--privatenet=172.16.0.0/24         Private net filter for private network KVM device
--hyper=HPR-dc-1-n0000001          Hypervisor full cld string or pattern
--run                              Non interactive mode
--debug                            Debug mode - if flag exist will list command and exit without execution
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
cld-cmcreate #CLI
cld-cmcreate --hyper=HPR-dc-1-n0000001 --os=CENTOS8 --name=srv1.example.com --cpu=2 --ram=2 --disk=20 --ip=1.2.3.4 --gate=1.2.3.1 --id=10001 --storage=zfs01 --run
EOL
)
source /var/cld/bin/include/cldfuncs
source /var/cld/cm/bin/include/bot
source /var/cld/cm/bin/include/create_funcs
source /var/cld/cm/bin/include/create_vars
mkdir -p /var/log/cld/cm /var/cld/cm/data &>/dev/null
echo  "`date` - ${@:0}" >> /var/log/cld/cm/cmd_create.log
touch /var/cld/cm/LOCK
CMLOCK=$(cat /var/cld/cm/LOCK)
[ -d "/var/cld/cm/data" ] || mkdir -p /var/cld/cm/data &>/dev/null
[ -f "/var/cld/cm/data/queue_create" ] || touch /var/cld/cm/data/queue_create


if grep -q "1" /var/cld/cm/LOCK
    then echo "${@:0}" >> /var/cld/cm/data/queue_create
    if [ "$RUN" = "1" ]
        then
        echoexit0 Lock detected - task added to the /var/cld/cm/data/queue_create - exit
        else
        echo LOCK detected, do you want FORCE UNLOCK ?
        select LOCK in yes no
            do
            if [ "$LOCK" == "yes" ]
                then
                echo
                sed -i '$ d' /var/cld/cm/data/queue_create
                else
                exit 0
            fi
            break
            done
    fi
    else echo 1 > /var/cld/cm/LOCK
fi

ROOTPASSWORD=""

for i in ${CLDOPTS}
do
case $i in
-o=*|-os=*|--os=*) OS="${i#*=}"                              ;;
-t=*|-template=*|--template=*) TEMPLATE="${i#*=}"            ;;
-n=*|-name=*|--name=*) VMNAME="${i#*=}"                      ;;
-c=*|-cpu=*|--cpu=*) VMCPU="${i#*=}"                         ;;
-r=*|-ram=*|--ram=*) VMMEMORY="$(expr ${i#*=} / 1024)"       ;;
-d=*|-disk=*|--disk=*) DISK="${i#*=}"                        ;;
-i=*|-ip=*|--ip=*) IPADDR="${i#*=}"                          ;;
-m=*|-mac=*|--mac=*) MACADDR="${i#*=}"                       ;;
-g=*|-gate=*|--gate=*) GATEWAY="${i#*=}"                     ;;
-N=*|-netmask=*|--netmask=*) NTMASK="${i#*=}"                ;;
-I=*|-id=*|--id=*) VMID="${i#*=}"                            ;;
-p=*|-password=*|--password=*) ROOTPASSWORD="${i#*=}"        ;;
-k=*|-keys=*|--keys=*) KEYS="${i#*=}"                        ;;
-s=*|-storage=*|--storage=*) STORAGE="${i#*=}"               ;;
-S=*|-storagetype=*|--storagetype=*) STORAGE_TYPE="${i#*=}"  ;;
-d=*|-dc=*|--dc=*) DC="${i#*=}"                              ;;
-a=*|-autologin=*|--autologin=*) AUTO_LOGIN="${i#*=}"        ;;
-P=*|-privatenet=*|--privatenet=*) PRIVATENET="${i#*=}"      ;;
-H=*|-hyper=*|--hyper=*) HYPER="${i#*=}"                     ;;
-d|-debug|--debug) DEBUG=YES                                 ;;
-r|-run|--run) RUN=1                                         ;;
*) ;;
esac
done

init-load-constants HYPERVISOR_NAME_PREFIX\|HPR

[ "$HYPERVISOR_NAME_PREFIX" == "" ] && HYPERVISOR_NAME_PREFIX=HPR

[ "$HYPER" != "" ] && HYPERVISOR=$(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX" | grep "$HYPER" | head -1)

if [ "$HYPERVISOR" == "" ]
then
echo Please choose HYPERVISOR
select VM in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX")
do
if [ "$VM" ]
then
HYPERVISOR=$VM
echo
break
fi
done
fi

HPR_NAME=$(echo ${HYPERVISOR} | cut -d '_' -f 1)
HPR_HOST=$(echo ${HYPERVISOR} | cut -d '_' -f 2)
HPR_DC=$(/var/cld/modules/dns/bin/cld-geo ${HPR_HOST} | grep '"org":' | cut -d '"' -f 4 | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
[ "$HPR_DC" ] || HPR_DC=$(echo ${HPR_NAME} | cut -d '-' -f 2)


if [ "$OS" == "" ]
then
echo Please choose OS
select OS in $(echo "$OS_SETS" | cut -d _ -f 1)
do
if [ "$OS" ]
then
OS=$OS
echo
break
fi
done
fi

if [ "$VMNAME" == "" ]
then
while ! [[ "$VMNAME" =~  ^[a-z0-9.-]{3,61}$ ]]
do
echo "Please enter the VIRTUAL MACHINE NAME using only 'a-z 0-9 - .' symbols
Example: example.com"
echo -n '#? '; read VMNAME
echo
done
fi

if [ "$VMCPU" == "" ]
then
while ! [[ "$VMCPU" =~  ^([1-9]|[1-8][0-9]|9[0-9]|1[01][0-9]|12[0-8])$ ]]
do
echo "Please enter the CPU CORES using only '0-9' symbols
Example: 2"
echo -n '#? '; read VMCPU
echo
done
fi

if [ "$VMMEMORY" == "" ]
then
while ! [[ "$VMMEMORY" =~  ^([1-9]|[1-8][0-9]|9[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6])$ ]]
do
echo "Please enter the RAM GB using only '0-9' symbols
Example: 2"
echo -n '#? '; read VMMEMORY
echo
done
VMMEMORY=$(expr ${VMMEMORY} \* 1024)
fi

if [ "$DISK" == "" ]
then
while ! [[ "$DISK" =~  ^([1-8][0-9]|9[0-9]|[1-8][0-9]{2}|900)$ ]]
do
echo "Please enter the DISK SPACE GB using only '0-9' symbols
Example: 20"
echo -n '#? '; read DISK
echo
done
fi

if [ "$IPADDR" == "" ]
then
while ! [[ "$IPADDR" =~  ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]
do
echo "Please enter the MAIN IP ADDRESS using only '0-9 .' symbols
Example: 1.2.3.4"
echo -n '#? '; read IPADDR
echo
done
fi

if [ "$MACADDR" == "" -a "$RUN" != "1" ]
then
while ! [[ "$MACADDR" =~  ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$ ]]
do
echo "Please enter the MAC ADDRESS using only '0-9 a-z :' or press ENTER to SKIP"
echo -n '#? '; read MACADDR
echo
[ "$MACADDR" == "" ] && break
done
fi

if [ "$GATEWAY" == "" -a "$HPR_DC" == "ovh" ]
then
echo GATEWAY is not defined - detecting - please wait
GATEWAY=$(get-ovh-gateway $HYPERVISOR)
elif [ "$GATEWAY" == "" -a "$HPR_DC" == "hetzner" ]
then
GATEWAY=$HPR_HOST
elif [ "$GATEWAY" == "" -a "$HPR_DC" == "online" ]
then
GATEWAY=62.210.0.2
fi


if [ "$GATEWAY" == "" ]
then
while ! [[ "$GATEWAY" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]
do
echo "Please enter the GATEWAY ADDRESS using only '0-9 .' symbols
Example: 1.2.3.1"
echo -n '#? '; read GATEWAY
echo
done
else
echo "[OK] Gateway detected"
fi

if [ "$NTMASK" = "" ] ; then NTMASK="255.255.255.0" ; fi

if [ "$STORAGE" == "" ]
then
echo "Please choose PVE STORAGE"
select STORAGE in $(get-storage-pools $HYPERVISOR)
do
STORAGE=$STORAGE
echo
break
done
fi

if [ "$STORAGE" == "" ]
then
while ! [[ "$STORAGE" =~  [a-z0-9]+ ]]
do
echo "Please enter the PVE STORAGE NAME using only 'a-z 0-9' symbols
Example: zfs01"
echo -n '#? '; read STORAGE
echo
done
fi

echo "$STORAGE" | grep -q zfs && export STORAGE_TYPE=zfs
echo "$STORAGE" | grep -q lvm && export STORAGE_TYPE=lvm
echo "$STORAGE" | grep -q qcow && export STORAGE_TYPE=qcow2

if [ "$STORAGE_TYPE" == "" ]
then
while ! [[ "$STORAGE_TYPE" =~  [a-z0-9]+ ]]
do
echo "Please enter the PVE STORAGE TYPE using only 'a-z 0-9' symbols
Example: zfs lwm qcow2"
echo -n '#? '; read STORAGE_TYPE
echo
done
fi

if [ "$VMID" = "" ]
then
echo VMID is not defined - detecting - please wait
VMID=$(expr `get-last-vmid` + 1)
[ "$VMID" -lt "100" ] && VMID=10001
echo VMID is $VMID
echo
fi

if [ "$ROOTPASSWORD" = "" ] ; then ROOTPASSWORD=$(date +%s | sha256sum | base64 | head -c 32 ; echo -n) ; fi

if [ "$DC" = "" ] ; then DC='*' ; fi

SSH_KEYS=$(cat /root/.ssh/id_rsa.pub)

# REQ_CPU=$(echo "$VMCPU*1" | bc | cut -d '.' -f 1) ;
# REQ_MEMORY=$(echo "$VMMEMORY*1/1024" | bc | cut -d '.' -f 1)
# REQ_DISK=$(echo "$DISK*0.6" | bc | cut -d '.' -f 1)

# ### HYPERVISOR SELECTOR RATING ALGORITM START
# rm -f /var/cld/cm/tmp/select_hyper_list ; rm -f /var/cld/cm/tmp/choice_hyper_list
# touch /var/cld/cm/tmp/select_hyper_list ; touch /var/cld/cm/tmp/choice_hyper_list
# for HPR_RES in $(cat /var/cld/cm/dc/${DC}/res_hyper_list | grep -vf /var/cld/cm/dc/${DC}/hyper_list_ignore)
#  do
#  HPR_CPU=$(echo "$HPR_RES" | cut -d '_' -f 2)
#  HPR_MEMORY=$(echo "$HPR_RES" | cut -d '_' -f 3)
#  HPR_DISK=$(echo "$HPR_RES" | cut -d '_' -f 4)
#  if [[ "$REQ_CPU" -lt "$HPR_CPU" && "$REQ_MEMORY" -lt "$HPR_MEMORY" && "$REQ_DISK" -lt "$HPR_DISK" ]]; then echo "$HPR_RES" >> /var/cld/cm/tmp/select_hyper_list ; fi
# done

# for HPR_RES in $(cat /var/cld/cm/tmp/select_hyper_list)
# do
#  HPR_CPU=$(echo "$HPR_RES" | cut -d '_' -f 2)
#  HPR_MEMORY=$(echo "$HPR_RES" | cut -d '_' -f 3)
#  HPR_DISK=$(echo "$HPR_RES" | cut -d '_' -f 4)
#  MORE_REQ_CPU=$(expr $HPR_CPU - $REQ_CPU)
#  MORE_REQ_MEMORY=$(expr $HPR_MEMORY - $REQ_MEMORY)
#  MORE_REQ_DISK=$(expr $HPR_DISK - $REQ_DISK)
#  RATE_REQ_CPU=$(echo "$MORE_REQ_CPU*1" | bc | cut -d '.' -f 1)
#  RATE_SCORE=$(expr $RATE_REQ_CPU + $MORE_REQ_MEMORY)
#  HPR_SCORE=$(echo "$HPR_RES" | awk '{print $1}')
#  if [[ "$MORE_REQ_CPU" -gt 1 && "$MORE_REQ_MEMORY" -gt 3 && "$MORE_REQ_DISK" -gt 5 ]]; then echo "$RATE_SCORE $HPR_SCORE"  >> /var/cld/cm/tmp/choice_hyper_list ; fi
# done
# ### HYPERVISOR SELECTOR RATING ALGORITM END
# if [ "$DC" = "*" ] ; then DC=`grep -l $(awk '{print $2}' /var/cld/cm/tmp/choice_hyper_list | cut -d _ -f 1) /var/cld/cm/dc/*/hyper_list | awk -F '/' '{print $5}'` ; fi

#DETECT VARIABLES
HPR_NAME=$(echo ${HYPERVISOR} | cut -d '_' -f 1)
HPR=$(echo ${HYPERVISOR} | cut -d '_' -f 2)
if [ "$HPR" = "" ] ; then
 echo "No suitable hypervisor is detected, cluster expansion may be required, or the hypervisor resource requirements may be adjusted in this script" ; exit 1
fi
HPR_PORT=$(echo ${HYPERVISOR} | cut -d '_' -f 3)
HPR_USER=$(echo ${HYPERVISOR} | cut -d '_' -f 4)
HPR_DC=$(echo ${HPR_NAME} | cut -d '-' -f 2)
# echo $STORAGE | grep -q "^$" && STORAGE=$(cat /var/cld/cm/tmp/choice_hyper_list | sort -nr | awk '{print $2}' | head -1 | cut -d '_' -f 5 | cut -d ':' -f 2)
# echo $STORAGE_TYPE | grep -q "^$" && STORAGE_TYPE=$(cat /var/cld/cm/tmp/choice_hyper_list | sort -nr | awk '{print $2}' | head -1 | cut -d '_' -f 5 | cut -d ':' -f 1)

NTWRK=$(echo $GATEWAY | sed -r "s#([0-9]+\.[0-9]+\.[0-9]+).*#\1.`echo $GATEWAY | cut -d '.' -f 4 | xargs -I ^ expr ^ - 1`#g")
BRDCST=$(echo $GATEWAY | sed -r "s#([0-9]+\.[0-9]+\.[0-9]+).*#\1.255#g")
CIDR=$(whatmask $IPADDR/$NTMASK | grep 'CIDR' | awk '{ print $4  }')

DC_PROVIDER=$HPR_DC

# source /var/cld/cm/bin/include/dc_functions
# source /var/cld/cm/bin/include/dc_vars
# if echo "$DC_PROVIDER" | grep --quiet "caovh" ; then
#  caovh-creds
#  HPR_NAME=$(caovh-get-servicename-by-ip)
#  caovh-move-ip
#  GATEWAY=$(caovh-get-gateway-by-servicename)
#  MACADDR=$(grep $IPADDR /var/cld/cm/dc/caovh_ip_list | cut -d _ -f 2)
#  DC_CONFIGURE_KVM=$CAOVH_CONFIGURE_KVM
#  DC_OS_CONFIGURATION=$CAOVH_OS_CONFIGURATION
# else
#  DC_ACTIONS=""
#  DC_CONFIGURE_KVM=""
#  DC_OS_CONFIGURATION=""
# fi

source /var/cld/cm/bin/include/autologin_vars
source /var/cld/cm/bin/include/privatenet_vars
source /var/cld/cm/bin/include/create_logic

### DEBUG MODE
DEBUG_CMD=$(cat << EOL
Hypervisor: $HYPERVISOR
Datacenter: $HPR_DC
$CMD_CREATE_SET
EOL
)
echo $DEBUG | grep -q YES && (
cat << EOL
$DEBUG_CMD
EOL
)
echo $DEBUG | grep -q YES && truncate -s 0 /var/cld/cm/LOCK
echo $DEBUG | grep -q YES && exit 1

echo $DEBUG | grep -q YES || (
cat << EOL
Hypervisor: $HYPERVISOR
Datacenter: $HPR_DC
$CONSTANTS
EOL
)
echo
cat << EOL
Equivalent non-interactive command:
cld-cmcreate --hyper=${HYPERVISOR} --os=${OS} --name=${VMNAME} --cpu=${VMCPU} --ram=$(expr ${VMMEMORY} / 1024) --disk=${DISK} --ip=${IPADDR} --mac=${MACADDR} --gate=${GATEWAY} --storage=${STORAGE} --run

EOL

if [ "$RUN" != "1" ]
then
echo "Approve settings?"
echo -n "y/n: " && read ANSWER
if [ "$ANSWER" = "y" ]
then
echo
else
truncate -s 0 /var/cld/cm/LOCK
exit 1
fi
fi

echo "${VMID}" > /var/cld/cm/data/last_vmid

LOG_FILE=/var/log/cld/cm/${VMID}_create.log

echo "{\"vmid\":\"$VMID\",\"cpu\":\"$VMCPU\",\"ram\":\"$VMMEMORY\",\"disk\":\"$DISK\",\"received\":\"1\",\"keys\":\"$SSH_KEYS\",\"dc\":\"$DC\",\"os\":\"$OS\",\"name\":\"$VMNAME\",\"ip\":\"$IPADDR\",\"gate\":\"$GATEWAY\",\"netmask\":\"$NTMASK\",\"password\":\"$ROOTPASSWORD\",\"storage\":\"$STORAGE\",\"storage_type\":\"$STORAGE_TYPE\",\"mac\":\"$MACADDR\"}" >> /var/cld/cm/data/vms_info

echo "${VMID}_${HPR}_${HPR_PORT}" >> /var/cld/cm/data/vmid_hyper_list

cat >> ${LOG_FILE} << EOLOG
$CMD_CREATE_SET
EOLOG

(
ssh -q -p $HPR_PORT -o "StrictHostKeyChecking no" -o "RequestTTY force" ${HPR_USER}@$HPR "sudo bash -s" << EOL
$CMD_CREATE_SET
exit
EOL
) 2>&1 | tee -a ${LOG_FILE}

echo "${VMNAME}_${IPADDR}_22_root_${ROOTPASSWORD}" >> /var/cld/access/groups/default/clouds
echo "CLD instance ${VMNAME}_${IPADDR}_22_root_${ROOTPASSWORD} added to default group"
if echo `ssh -q -p $HPR_PORT -o "StrictHostKeyChecking no" -o "RequestTTY force" ${HPR_USER}@$HPR "sudo qm list | grep $VMID"` | grep --quiet "running"
then echo "OK" >> ${LOG_FILE} ; send_tg Cloud \`${VMID}\` *created*'\n'Log file: \`${LOG_FILE}\`
else echo "FAIL" >> ${LOG_FILE} ; send_tg Cloud \`${VMID}\` *Error* while creating'\n'Log file: \`${LOG_FILE}\`
fi

#Get VMMAC after create
VMMAC=`ssh -q -p $HPR_PORT -o "StrictHostKeyChecking no" ${HPR_USER}@$HPR "sudo grep net0 /etc/pve/qemu-server/${VMID}.conf | egrep -o \"([0-9A-Z]{2}\:){5}[0-9A-Z]{2}\""`

truncate -s 0 /var/cld/cm/LOCK

/var/cld/cm/bin/cld-cm --json --nocache &>/dev/null & 
/var/cld/cm/bin/cld-cm &>/dev/null &
wait

cat /var/cld/cm/data/queue_create

if [ "$(cat /var/cld/cm/data/queue_create | wc -w)" -le "3" ]
then
 exit 0
else
CMD_CREATE="`head -1 /var/cld/cm/data/queue_create`"
[ "$(echo "$CMD_CREATE" | wc -w)" -le "3" ] && continue
sed -i '1d' /var/cld/cm/data/queue_create
echo ${CMD_CREATE} | bash
fi