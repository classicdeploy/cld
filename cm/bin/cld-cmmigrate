#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Migrate KVM manager
EOL
)
HELP_ARGS=$(cat << 'EOL'
$1                                   First PATTERN filtering allowed KVMs
$2                                   Second PATTERN filtering allowed KVMs
$3                                   Third PATTERN filtering allowed KVMs
--id=10001                           KVM id
--source=HPR-pve-1_1.2.3.4_22_root   Source PVE hypervisor
--dest=HPR-pve-2_2.3.4.5_22_root     Destination PVE hypervisor
--clonefs                            Just clone ZFS partition to destination hypervisor without any destruction actions
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
cld-cmmigrate #CLI
cld-cmmigrate --id=10001 --source=HPR-pve-1_1.2.3.4_22_root --dest=HPR-pve-2_2.3.4.5_22_root
EOL
)
source /var/cld/bin/include/cldfuncs
source /var/cld/cm/bin/include/dc_funcs
source /var/cld/cm/bin/include/create_funcs

for i in ${CLDOPTS}
do
case $i in
-i=*|-id=*|--id=*) KVM_ID="${i#*=}"				;;
-d=*|-dest=*|--dest=*) DEST_HPR="${i#*=}" 		;;
-s=*|-source=*|--source=*) SOURCE_HPR="${i#*=}" ;;
-c|-clonefs|--clonefs) CLONEFS=1                ;;
-D|-debug|--debug) DEBUG=YES               		;;
-*)                                             ;;
*) let ii++; declare ARG$ii=${i}                ;;
esac
done

init-load-constants HYPERVISOR_NAME_PREFIX\|HPR

[ "$HYPERVISOR_NAME_PREFIX" == "" ] && HYPERVISOR_NAME_PREFIX=HPR

if [ "$KVM_ID" != "" -a "$SOURCE_HPR" != "" ]
then
KVM_SET=$(grep -s "_${KVM_ID}_" /var/cld/cm/tmp/kvm_list | grep "_${SOURCE_HPR}")
[ "${KVM_SET}" ] || KVM_SET=$(get-kvm-list 2>/dev/null | grep "_${KVM_ID}$" | grep "_${SOURCE_HPR}")
fi

if [ "$KVM_SET" = "" ]
then
echo KVM_SET is not defined - parsing hypervisors
echo Please choose KVM to migrate
select KVM_SET in $(get-kvm-list 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3")
do
if [ "$KVM_SET" ]
then
KVM_SET=$KVM_SET
echo
break
fi
done
fi
[ "${KVM_SET}" ] || echoexit1 KVM_SET is not defined - exit
SOURCE_HPR_NAME=$(cut -d _ -f 3 <<< ${KVM_SET})
KVM_NAME=$(cut -d _ -f 1 <<< ${KVM_SET})
KVM_ID=$(cut -d _ -f 2 <<< ${KVM_SET})
[ "$KVM_ID" ] || echoexit1 KVM_ID is not defined - exit
[ "$KVM_NAME" ] || echoexit1 KVM_NAME is not defined - exit
[ "$SOURCE_HPR_NAME" ] || echoexit1 SOURCE_HPR_NAME is not defined - exit

SOURCE_HPR=$(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX" | grep "^${SOURCE_HPR_NAME}")
[ "${SOURCE_HPR}" ] || echoexit1 Source hypervisor is not defined - exit

if [ "$SOURCE_STORAGE" == "" ]
then
SOURCE_STORAGE=$(get-storage-by-id ${SOURCE_HPR} ${KVM_ID})
fi
[ "$SOURCE_STORAGE" ] || echoexit1 Source storage is not defined - exit

if [ "$SOURCE_STORAGE_PATH" == "" ]
then
SOURCE_STORAGE_PATH=$(get-zfs-storage-path-by-name ${SOURCE_HPR} ${SOURCE_STORAGE})
fi
[ "$SOURCE_STORAGE_PATH" ] || echoexit1 Source storage path is not defined - exit

if [ "$SOURCE_ZFS_PARTITION" == "" ]
then
SOURCE_ZFS_PARTITION=$(get-zfs-partition-by-id ${SOURCE_HPR} ${SOURCE_STORAGE_PATH} ${KVM_ID})
fi
[ "$SOURCE_ZFS_PARTITION" ] || echoexit1 Source zfs partition is not defined - exit

if [ "$DEST_HPR" == "" ]
then
echo Please choose destination HYPERVISOR
select DEST_HPR in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX" | grep -v "${SOURCE_HPR}")
do
if [ "$DEST_HPR" ]
then
DEST_HPR=$DEST_HPR
echo
break
fi
done
else
DEST_HPR=$(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX" | grep -v "${DEST_HPR}")
fi
[ "$DEST_HPR" ] || echoexit1 Destination hypervisor is not defined - exit

if [ "$DEST_STORAGE" == "" ]
then
echo "Please choose PVE destination STORAGE on ${DEST_HPR}"
select STORAGE in $(get-storage-pools ${DEST_HPR})
do
DEST_STORAGE=$STORAGE
echo
break
done
fi
[ "$DEST_STORAGE" ] || echoexit1 Destination hypervisor is not defined - exit

if [ "$DEST_STORAGE_PATH" == "" ]
then
DEST_STORAGE_PATH=$(get-zfs-storage-path-by-name ${DEST_HPR} ${DEST_STORAGE})
fi
[ "$DEST_STORAGE_PATH" ] || echoexit1 Destination storage path is not defined - exit

SOURCE_HPR_SSH_KEY="$(get-hypervisor-ssh-key ${SOURCE_HPR})"
[ "${SOURCE_HPR_SSH_KEY}" ] || exhoexit1 SOURCE_HPR_SSH_KEY is not defined - exit

KVM_IP="$(get-kvm-ip-by-id ${SOURCE_HPR} ${KVM_ID})"

DEST_HPR_NAME=$(cut -d "_" -f 1 <<< $DEST_HPR)
DEST_HPR_IP=$(cut -d "_" -f 2 <<< $DEST_HPR)
DEST_HPR_PORT=$(cut -d "_" -f 3 <<< $DEST_HPR)
DEST_HPR_USER=$(cut -d "_" -f 4 <<< $DEST_HPR)

SOURCE_HPR_IP=$(cut -d "_" -f 2 <<< ${SOURCE_HPR})
SOURCE_HPR_PORT=$(cut -d "_" -f 3 <<< ${SOURCE_HPR})
SOURCE_HPR_USER=$(cut -d "_" -f 4 <<< ${SOURCE_HPR})

HPR_DC=$(/var/cld/modules/dns/bin/cld-geo ${DEST_HPR_IP} | grep '"org":' | cut -d '"' -f 4 | awk '{print $1}' | tr '[:upper:]' '[:lower:]')

source /var/cld/cm/bin/include/migrate_vars

cat << EOL
COMMANDS FOR DEBUG:

$CONSTANTS

$PREPARE_SOURCE_HPR

$PREPARE_DEST_HPR

$PREPARE_CONF

$PVE_ZSYNC

$KVM_STOP

$SWITCH_KVM_CONFIGS

$START_KVM
EOL

[ "$DEBUG" == "YES" ] && echoexit1 exit due debug

echo
echo Preparing hypervisors
echo
#PREPARE DESTINATION HYPERVISOR
timeout 60 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p ${DEST_HPR_PORT} ${DEST_HPR_USER}@${DEST_HPR_IP} "bash -s" << EOSSH
${CONSTANTS}
${PREPARE_DEST_HPR}
EOSSH

#PREPARE SOURCE HYPEVISOR
timeout 60 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p ${SOURCE_HPR_PORT} ${SOURCE_HPR_USER}@${SOURCE_HPR_IP} "bash -s" << EOSSH
${CONSTANTS}
${PREPARE_SOURCE_HPR}
EOSSH
echo
echo Hypervisors prepared to migrate
echo

echo Checking access between $SOURC_HPR and $DEST_HPR hypervisors
if ssh -o "StrictHostKeyChecking no" -p ${SOURCE_HPR_PORT} ${SOURCE_HPR_USER}@${SOURCE_HPR_IP} "ssh -o \"StrictHostKeyChecking=no\" -p ${DEST_HPR_PORT} $DEST_HPR_IP \"echo done\"" | grep -q "done"
	then
		echo Access test script passed
	else
		echoexit1 Fail to access to $DEST_HPR FROM ${SOURCE_HPR} - exit
fi
echo
echo "Start migrate KVM $KVM_NAME"
echo
for ITTER in 1 2 3
do
ssh -o "StrictHostKeyChecking no" -p ${SOURCE_HPR_PORT} ${SOURCE_HPR_USER}@${SOURCE_HPR_IP} 'bash -s' << EOSSH
$CONSTANTS
$PVE_ZSYNC
EOSSH
sleep 3s
done
[ "$CLONEFS" = "1" ] && echoexit0 FS image of $KVM_NAME cloned to $DEST_HPR - exit
echo
echo "Ready to stop KVM BEFORE switch - please STOP DATABASE at $KVM_NAME and PRESS [ENTER] to continue migration process" ; read SKIP_WAIT
echo
ssh -o "StrictHostKeyChecking no" -p ${SOURCE_HPR_PORT} ${SOURCE_HPR_USER}@${SOURCE_HPR_IP} 'bash -s' << EOSSH
$CONSTANTS
$KVM_STOP
$PVE_ZSYNC
EOSSH
echo

if [ "$HPR_DC" == "ovh" ]
then
init-load-constants OVH\|0 OVH_CONSUMER_KEY\|uAjAWotdxHyxQ7ddvAFCco3sa990wHqsy OVH_APP_KEY\|X05b2oM4vmsc4Nz8F OVH_APP_SECRET\|nW76Meps7rZGFLFrR7XgL4dsKS6xJwEF
GATEWAY=$(get-ovh-gateway $DEST_HPR)
echo
echo Changing KVM gateway at $DEST_HPR
echo
ssh -o StrictHostKeyChecking=no -o "RequestTTY force" -p ${DEST_HPR_PORT} ${DEST_HPR_USER}@${DEST_HPR_IP} "bash -s" << EOSSH
unset HISTFILE
${CONSTANTS}
GATEWAY=${GATEWAY}
qm status $KVM_ID
sleep 3s
${DETECT_MOUNT_ZFS_STORAGE}
sleep 3s
${DETECT_OS_REPLACE_GATEWAY}
sleep 3s
${UMOUNT_ZFS_CHECK}
exit
EOSSH
echo
[ "$OVH" == "1" ] && OVH_HPR_NAME=$(caovh-get-servicename-by-ip $DEST_HPR_IP)
[ "${KVM_IP}" != "" -a "$OVH" == "1" ] && caovh-move-ip ${KVM_IP} ${OVH_HPR_NAME} || echo "Ready to switch KVM - please migrate IP address at datacenter side if it required and press [ENTER]"
[ "${KVM_IP}" != "" -a "$OVH" == "1" ] || read SKIP_WAIT
elif [ "$HPR_DC" == "hetzner" ]
then
GATEWAY=$HPR_HOST
echo "Ready to switch KVM - please migrate IP address at datacenter side if it required and press [ENTER]" ; read SKIP_WAIT
elif [ "$HPR_DC" == "online" ]
then
init-load-constants ONLINE_NET\|0 ONLINE_NET_PRIVATE_ACCESS_TOKEN\|Xj0tDfJrBmWq5bcEgRenGwJkAydejQDWxqSFArET
[ "$ONLINE_NET" == "1" ] && curl -sX POST -H "Authorization: Bearer ${ONLINE_NET_PRIVATE_ACCESS_TOKEN}" \
-H "Content-Type: application/json" \
"https://api.online.net/api/v1/server/failover/edit" \
--data "$(jq -c . << EOL
{ "source": "${KVM_IP}", "destination": "${DEST_HPR_IP}" }
EOL
)" | jq .

else
echo "Ready to switch KVM - please migrate IP address at datacenter side if it required and press [ENTER]" ; read SKIP_WAIT
fi

echo
ssh -o "StrictHostKeyChecking no" -p ${SOURCE_HPR_PORT} ${SOURCE_HPR_USER}@${SOURCE_HPR_IP} 'bash -s' << EOSSH
$CONSTANTS
$SWITCH_KVM_CONFIGS
EOSSH
echo
echo "KVM configs switched - check if migrated KVM need change gateway"
echo

echo
echo "starting KVM at $DEST_HPR"
echo
ssh -o StrictHostKeyChecking=no -p ${DEST_HPR_PORT} ${DEST_HPR_USER}@${DEST_HPR_IP} "bash -s" << EOSSH
${CONSTANTS}
${START_KVM}
EOSSH
echo
echo "Migration of  $KVM_NAME completed - you need check everything and delete source ZFS partition at $DEST_HPR yourself"

/var/cld/cm/bin/cld-cm --json --nocache &>/dev/null & 
/var/cld/cm/bin/cld-cm &>/dev/null &
wait