get-last-vmid ()
{
mkdir -p /var/cld/cm/tmp/ &>/dev/null
truncate -s 0 /var/cld/cm/tmp/last_vmid
for VM in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX")
do
(
SRV=`echo $VM | cut -d "_" -f 2`
PRT=`echo $VM | cut -d "_" -f 3`
USR=`echo $VM | cut -d "_" -f 4`
timeout 20 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "qm list" 2>/dev/null | awk 'NR>1 {print $1}' | grep -v '^500' >> /var/cld/cm/tmp/last_vmid
)
done
wait
sort -nu /var/cld/cm/tmp/last_vmid | tail -1
}

KVMS_USER_ALLOWED() {
for OPTS in ${@:1}
do
echo $OPTS | grep -q  '^\--groups=' && CLD_GROUPS="$(echo $OPTS | cut -d '=' -f 2 | tr '\n' ',' | sed 's#,#$,#g' | sed 's#^\$,##g' | tr ',' '\n')"
echo $OPTS | grep -q  '^\--json' && JSONFUNCOUT=1
done

ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -3 | tail -1)

if [ "$JSONFUNCOUT" == "1" ]
then
  for GROUP in $(grep -v "^$\|^#" /var/cld/access/users/${SUDO_USER}/groups | grep "${CLD_GROUPS}")
  do
    CLOUDS=$(grep -vh "^$\|^#" /var/cld/access/groups/${GROUP}/kvms 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3" | head -c -1)
    if [ "$(echo -n "$CLOUDS" | wc -w)" != "0" ]
    then
      cat << EOL | tr -d '\n'
{"group": "$GROUP",
"clouds": $(echo -n "$CLOUDS" | awk 'BEGIN {print "["} {print "\x22"$1"\x22,"} END {print "]"}' | tr -d '\n' | sed 's#,]#]#g')
},
EOL
    fi
  done | head -c -1 | cat <(echo -n '[') - <(echo -n ']')
else
  for GROUP in $(grep -v "^$\|^#" /var/cld/access/users/${SUDO_USER}/groups | grep "${CLD_GROUPS}")
  do
    grep -vh "^$\|^#" /var/cld/access/groups/${GROUP}/kvms 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3"
  done
  [ "$CLD_GROUPS" ] || grep -vh "^$\|^#" /var/cld/access/users/${SUDO_USER}/kvms 2>/dev/null | grep -i "$ARG1" | grep -i "$ARG2" | grep -i "$ARG3"
fi
}

get-kvm-list()
{
ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -3 | tail -1)

HYPERVISOR_NAME_PREFIX=${HYPERVISOR_NAME_PREFIX:-HPR}
mkdir -p /var/cld/cm/tmp &>/dev/null
rm -f /var/cld/cm/tmp/kvm_list.tmp &>/dev/null
for VM in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX")
do
(
HPRNM=`echo $VM | cut -d "_" -f 1`
SRV=`echo $VM | cut -d "_" -f 2`
PRT=`echo $VM | cut -d "_" -f 3`
USR=`echo $VM | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "qm list" 2>/dev/null | awk -v hpr=${HPRNM} 'NR>1 {print $2"_"$1"_"hpr}' | grep -v '_500' >> /var/cld/cm/tmp/kvm_list.tmp
) &
done
wait
unalias mv &>/dev/null
mv -f /var/cld/cm/tmp/kvm_list.tmp /var/cld/cm/tmp/kvm_list &>/dev/null
if [ "$(user_is_admin ${SUDO_USER})" = "0" ]
then
grep "$(KVMS_USER_ALLOWED)" /var/cld/cm/tmp/kvm_list
else
KVMS_ALLOWED="$(KVMS_USER_ALLOWED)"
KVMS_ALLOWED_COUNT=$(wc -w <<< "${KVMS_ALLOWED}")
[ "${KVMS_ALLOWED_COUNT}" -gt "0" ] && grep "$KVMS_ALLOWED" /var/cld/cm/tmp/kvm_list || echo -n
fi
}

get-kvm-list-json()
{
unalias mv &>/dev/null
HYPERVISOR_NAME_PREFIX=${HYPERVISOR_NAME_PREFIX:-HPR}
DATEID=$(date +%S%N | head -c 4)
mkdir -p /var/cld/cm/tmp &>/dev/null
[ -f "$/var/cld/cm/tmp/kvm_json" ] || touch /var/cld/cm/tmp/kvm_json
KVM_LIST_FILE_STRINGS=$(grep -o '"hypervisor":' /var/cld/cm/tmp/kvm_json | wc -w)
KVM_SEC_FILE_CHANGED=$(($(date +%s) - $(date +%s -r /var/cld/cm/tmp/kvm_json)))
if [ "$KVM_LIST_FILE_STRINGS" -lt "1" -o "$KVM_SEC_FILE_CHANGED" -ge "90" -o "$NOCACHE" -eq "1" ]
then
PARSING_SCRIPT=$(cat << 'EOPARSING'
get-kvm-set()
{
which jq &>/dev/null || apt install jq -y &>/dev/null
for KVM_SET in $(qm list 2>/dev/null | awk 'NR>1 {print $1"_"$2"_"$3"_"$4/1024"_"$5/1}' | egrep -v "^50[0-9]{3}")
do
(
KVM_ID=$(cut -d _ -f 1 <<< $KVM_SET)
KVM_IPS=$(qm guest cmd ${KVM_ID} network-get-interfaces | jq -r '.[] ."ip-addresses"[] | select(."ip-address-type"=="ipv4")."ip-address"')
WHITE_IPS=$(egrep -v "(^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)" <<< ${KVM_IPS} | tr '\n' ',' | head -c -1)
GRAY_IPS=$(egrep "(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)" <<< ${KVM_IPS} | tr '\n' ',' | head -c -1)
KVM_CORES=$(grep "^cores:" /etc/pve/qemu-server/${KVM_ID}.conf | tr -d ' ' | cut -d : -f 2)
KVM_STORAGE=$(grep "^scsi0" /etc/pve/qemu-server/${KVM_ID}.conf | head -1 | cut -d : -f 2 | tr -d ' \t')
echo ${KVM_SET}_${KVM_CORES}_${WHITE_IPS}_${GRAY_IPS}_${KVM_STORAGE}
) & 2>/dev/null
done
wait
}
CORES=$(nproc)
BUSY_CORES=$(cat /proc/loadavg | cut -d ' ' -f 3 | cut -d '.' -f 1)
FREE_CORES=$(expr $CORES - $BUSY_CORES)
MEM=$(cat /proc/meminfo | awk '/(MemTotal|MemAvailable)/ {print int($2/1024/1024)}' | head -c -1 | tr '\n' '_')
QMS=$(get-kvm-set 2>/dev/null)
cat << EOL | tr -d '\n' | sed 's#],$#]#g' | cat - <(echo '},')
{"hypervisor": "$HPRNM",
"resources": $(echo "${CORES}_${FREE_CORES}_${MEM}"| awk -F _ '{print "{\x22""cores\x22"":\x22"""$1"\x22"",\x22""free_cores\x22"":\x22"$2"\x22"",\x22""ram\x22"":\x22"$3"\x22"",\x22""free_ram\x22"":\x22"$4"\x22""},"}' | tr -d '\n' | sed 's#,]#]#g')
"storages": $(zpool list -pH -o name,size,alloc,free,fragmentation,capacity,health | tr '\t' '_' | awk -F _ 'BEGIN {print "["} {print "{\
\x22name\x22:\x22"$1"\x22,\
\x22size\x22:\x22"int($2/1024/1024/1024)"\x22,\
\x22allocated\x22:\x22"int($3/1024/1024/1024)"\x22,\
\x22free\x22:\x22"int($4/1024/1024/1024)"\x22,\
\x22fragmentation\x22:\x22"$5"\x22,\
\x22capacity\x22:\x22"$6"\x22,\
\x22health\x22:\x22"$7"\x22},\
"} END {print "]"}' | tr -d '\n' | sed 's#,]#],#g')
"instances": $(
if [ "$(echo -n "$QMS" | wc -w)" != "0" ]
then
echo "$QMS" | awk -F _ 'BEGIN {print "["} {print "{\
\x22id\x22:\x22"$1"\x22,\
\x22name\x22:\x22"$2"\x22,\
\x22status\x22:\x22"$3"\x22,\
\x22ram\x22:\x22"$4"\x22,\
\x22disk\x22:\x22"$5"\x22,\
\x22cores\x22:\x22"$6"\x22,\
\x22whiteips\x22:\x22"$7"\x22,\
\x22grayips\x22:\x22"$8"\x22,\
\x22storage\x22:\x22"$9"\x22},\
"} END {print "]"}' | tr -d '\n' | sed 's#,]#],#g'
else
echo '[],'
fi
)
EOL
EOPARSING
)
for VM in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX")
do
(
HPRNM=`echo $VM | cut -d "_" -f 1`
SRV=`echo $VM | cut -d "_" -f 2`
PRT=`echo $VM | cut -d "_" -f 3`
USR=`echo $VM | cut -d "_" -f 4`
timeout 25 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "sudo bash -s" << EOSSH | tr '\r' '\n' >> /var/cld/cm/tmp/kvm_json_${DATEID}
HPRNM=${HPRNM}
${PARSING_SCRIPT}
EOSSH
) &
done
wait
cat /var/cld/cm/tmp/kvm_json_${DATEID} | tr -d '\r\n' | sed 's#},$#}#g' | cat <(echo -n '[') - <(echo -n ']') > /var/cld/cm/tmp/kvm_json_${DATEID}_full
rm -f /var/cld/cm/tmp/kvm_json_${DATEID} &>/dev/null
unalias mv &>/dev/null ; mv -f /var/cld/cm/tmp/kvm_json_${DATEID}_full /var/cld/cm/tmp/kvm_json
cat /var/cld/cm/tmp/kvm_json
else
cat /var/cld/cm/tmp/kvm_json
fi
}

get-storage-pools()
{
SRV=`echo $1 | cut -d "_" -f 2`
PRT=`echo $1 | cut -d "_" -f 3`
USR=`echo $1 | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "grep 'pool:' /etc/pve/storage.cfg" 2>/dev/null  | awk '{print $2}'
}

get-storage-by-id()
{
SRV=`echo $1 | cut -d "_" -f 2`
PRT=`echo $1 | cut -d "_" -f 3`
USR=`echo $1 | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "grep 'vm-${2}-disk-0' /etc/pve/qemu-server/${2}.conf" | cut -d : -f 2 | head -1 | tr -d '[:space:]'
}

get-zfs-partition-by-id()
{
SRV=`echo $1 | cut -d "_" -f 2`
PRT=`echo $1 | cut -d "_" -f 3`
USR=`echo $1 | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "zfs list | grep '$2'" | grep "${3}-disk-0" | awk '{print $1}'
}

get-zfs-storage-path-by-name()
{
SRV=`echo $1 | cut -d "_" -f 2`
PRT=`echo $1 | cut -d "_" -f 3`
USR=`echo $1 | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "grep -A5 $2 /etc/pve/storage.cfg"  | grep pool | grep -v ":" | head -1 | awk '{print $2}'
}

get-ovh-gateway()
{
SRV=`echo $1 | cut -d "_" -f 2`
PRT=`echo $1 | cut -d "_" -f 3`
USR=`echo $1 | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "ip route get 1.1.1.1" | grep dev | head -1 | awk '{print $3}'
}

get-hypervisor-ssh-key-list()
{
GET_KEY=$(cat << 'EOSSH'
[ -f /root/.ssh/id_rsa.pub ] || ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N "" &>/dev/null
cat /root/.ssh/id_rsa.pub
EOSSH
)
DEPLOY_CLD_KEY=$(cat << EOSSH
grep -qs $HOSTNAME /root/.ssh/authorized_keys2 || echo "$(cat /root/.ssh/id_rsa.pub)" >> /root/.ssh/authorized_keys2
EOSSH
)
for HYPERVISOR in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX")
do
(
SRV=`echo $HYPERVISOR | cut -d "_" -f 2`
PRT=`echo $HYPERVISOR | cut -d "_" -f 3`
USR=`echo $HYPERVISOR | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "bash -s" << EOSSH
${DEPLOY_CLD_KEY}
${GET_KEY}
EOSSH
) &
done
wait
}

get-kvm-ip-by-id()
{
SRV=`echo $1 | cut -d "_" -f 2`
PRT=`echo $1 | cut -d "_" -f 3`
USR=`echo $1 | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "qm guest cmd ${2} network-get-interfaces" | jq -r '.[] ."ip-addresses"[] | select(."ip-address-type"=="ipv4")."ip-address"' | grep -v "127.0.0.1\|172.16.0" | grep -svf <(cat /var/cld/creds/local_nets 2>/dev/null)
}

get-hypervisor-ssh-key()
{
GET_KEY=$(cat << 'EOSSH'
[ -f /root/.ssh/id_rsa.pub ] || ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N "" &>/dev/null
cat /root/.ssh/id_rsa.pub
EOSSH
)
DEPLOY_CLD_KEY=$(cat << EOSSH
grep -q $HOSTNAME /root/.ssh/authorized_keys2 || echo "$(cat /root/.ssh/id_rsa.pub)" >> /root/.ssh/authorized_keys2
EOSSH
)
[ "$1" ] || echoexit1 Hypervisor argument is not defined while using get-hypervisor-ssh-key function - exit
for HYPERVISOR in $(CLOUDS_USER_ALLOWED | grep -i "^$HYPERVISOR_NAME_PREFIX" | grep "${1}" | head -1)
do
SRV=`echo $HYPERVISOR | cut -d "_" -f 2`
PRT=`echo $HYPERVISOR | cut -d "_" -f 3`
USR=`echo $HYPERVISOR | cut -d "_" -f 4`
timeout 30 ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $PRT $USR@$SRV "bash -s" << EOSSH
${DEPLOY_CLD_KEY}
${GET_KEY}
EOSSH
done
}