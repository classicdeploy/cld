#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Stream any output to telegram chat
EOL
)
HELP_ARGS=$(cat << 'EOL'
--chatid=-1234567891011|123456789      Telegram chat or user id
--noansi                               Remove all ansi colors and escape sequences tags
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
tail -f /var/log/access.log | cld-tcloud-stream --chatid=-1234567891011
cld | cld-tcloud-stream --chatid=-1234567891011 --noansi
EOL
)
HELP_ONLY="CLI"

source /var/cld/bin/include/cldfuncs
init-load-constants TELEGRAM_BOT_TOKEN\|1234567890:AAEzBFqFii-uirfyG3PnygA0DAvJvRH7UzB CLD_DOMAIN\|cld.example.com

for i in ${CLDOPTS}
do
case $i in
-c=*|-chatid=*|--chatid=*) TG_GROUP="${i#*=}"   ;;
-n|-noansi|--noansi) ANSIFILTER=1               ;;
*) ;;
esac
done

[ "$TG_GROUP" ] || echoexit1 Telegram user or chat id is not defined - use --help argument for details

export COMMAND_ID=$(cat /dev/urandom | tr -dc abcdefjhgkmnopqrstuvwxyzABCDEFJHGKLMNPQRSTUVWXYZ1234567890 | head -c 7)
export STREAM_FILE=/var/cld/tmp/tgstream/cmd_${COMMAND_ID}
[ -d "/var/cld/tmp/tgstream" ] || mkdir -p /var/cld/tmp/tgstream
touch ${STREAM_FILE}

sendmessage() {
curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
-d "chat_id=${TG_GROUP}&parse_mode=markdown&text=\`\`\`%0A$(urlencode "$1")\`\`\`"
}

sendmessagefile() {
local MESSAGE_TEXT=$(cat ${1})
[ "$(echo ${MESSAGE_TEXT} | wc -c)" -le "3" ] && MESSAGE_TEXT="Next init message"
curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
-d "chat_id=${TG_GROUP}&parse_mode=markdown&text=\`\`\`%0A$(urlencode "${MESSAGE_TEXT}")\`\`\`"
}

editmessage() {
local MESSAGE_ID=$1
local MESSAGE_TEXT=$(cat ${2})
curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText" \
-d "chat_id=${TG_GROUP}&message_id=${MESSAGE_ID}&parse_mode=markdown&text=\`\`\`%0A$(urlencode "${MESSAGE_TEXT}")\`\`\`" | grep false 1>&2
}

MESSAGE_ID=$(sendmessage initializing | jq .result.message_id)

{
MAX_LENGTH=4000
PREV_FILE=/var/cld/tmp/tgstream/xaaa${COMMAND_ID}
PREV_FILE_SIZE=0
while :;
do
[ -f "/var/cld/tmp/tgstream/cmd_${COMMAND_ID}_done" ] && export STREAM_DONE=1
STREAM_FILE_SIZE=$(du -b ${STREAM_FILE} | cut -d $'\t' -f 1)

if [ "$STREAM_FILE_SIZE" != "0" ]; then
(cd $(dirname ${STREAM_FILE}) ; split --line-bytes=${MAX_LENGTH} --additional-suffix=${COMMAND_ID} --suffix-length=3 ${STREAM_FILE})

LAST_FILE=$(ls /var/cld/tmp/tgstream/x* | grep ${COMMAND_ID} | tail -1)

PREV_FILE_CURRENT_SIZE=$(du -b ${PREV_FILE} | cut -d $'\t' -f 1)
  if [ "$LAST_FILE" != "$PREV_FILE" ]; then
    if [ "$PREV_FILE_CURRENT_SIZE" != "$PREV_FILE_SIZE" ]; then
      editmessage $MESSAGE_ID $PREV_FILE
      FILES_LAST_TO_CURRENT=$(ls /var/cld/tmp/tgstream/x* | grep ${COMMAND_ID} | grep -A1000 "$PREV_FILE" | tail -n +2)
      for SEND_FILE in ${FILES_LAST_TO_CURRENT}
      do
        MESSAGE_ID=$(sendmessagefile $SEND_FILE | jq .result.message_id)
        PREV_FILE=$SEND_FILE
        sleep 2s
      done
      PREV_FILE_SIZE=$(du -b ${PREV_FILE} | cut -d $'\t' -f 1)
    fi
  elif [ "$LAST_FILE" = "$PREV_FILE" ]; then
    if [ "$PREV_FILE_CURRENT_SIZE" != "$PREV_FILE_SIZE" ]; then
      PREV_FILE_SIZE=$PREV_FILE_CURRENT_SIZE
      editmessage $MESSAGE_ID $PREV_FILE
    fi
  fi
fi
[ "$STREAM_DONE" ] && break
sleep 2s
done
} &

if [ "$ANSIFILTER" ]
then
ANSIFILTER_PREFIX=".ansi"
touch ${STREAM_FILE}${ANSIFILTER_PREFIX}
{
while :;
do
ansifilter -i ${STREAM_FILE}${ANSIFILTER_PREFIX} -o ${STREAM_FILE}.tmp && { mv -f ${STREAM_FILE}.tmp ${STREAM_FILE} ; }
[ -f "/var/cld/tmp/tgstream/cmd_${COMMAND_ID}_done" ] && break
sleep 0.1s
done
} &
fi

while IFS= read line; do
echo "${line}" | tee -a ${STREAM_FILE}${ANSIFILTER_PREFIX}
done
touch /var/cld/tmp/tgstream/cmd_${COMMAND_ID}_done
wait