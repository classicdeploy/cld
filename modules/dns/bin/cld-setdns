#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Set or replace DNS record at CloudFlare
Domain will added to the default CloudFlare account if main zone of the record doesn't exist in any of connected api keys.
EOL
)
HELP_ARGS=$(cat << 'EOL'
$1                       DNS record type
$2                       DNS zone - FQDN
$3                       DNS zone content
--proxy                  Set up CloudFlare proxyfying
--force                  Use if you need several record for one DNS zone - using for DNS roundrobin
--cfacc=youracc@at.cf    Email of your CloudFlare account - if you have several at /var/cld/creds/creds_dns_cf_api_list
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
cld-setdns a subdomain.example.com 1.2.3.4
cld-setdns a subdomain.example.com 1.2.3.4 -proxy
cld-setdns a subdomain.example.com 1.2.3.4 -force
cld-setdns a subdomain.example.com 1.2.3.4_2.3.4.5
cld-setdns a subdomain.example.com 1.2.3.4_2.3.4.5 -proxy -force
EOL
)
source /var/cld/bin/include/cldfuncs
source /var/cld/modules/dns/bin/include/dnsfuncs

ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '^\-' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '^\-' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '^\-' | tail -n +3 | tr '\n' ' ' | head -c -1)

for i in ${CLDOPTS}
do
case $i in
-c=*|-cfacc=*|--cfacc=*) CFACC="${i#*=}"    ;;
-p|-proxy|--proxy) CFPROXY=1                ;;
-f|-force|--force) FORCE=1                  ;;
*) ;;
esac
done

TYPE=${ARG1^^}
DNS_ZONE=${ARG2,,}
MAIN_ZONE=$(echo $DNS_ZONE | rev | cut -d . -f -2 | rev)
CONTENT=$(echo $ARG3 | cut -d _ -f 1)
NEW_CONTENT=$(echo $ARG3 | grep "_" | cut -d _ -f 2)

echo $TYPE | grep -q "^A$\|^AAAA$\|^CNAME$\|^TXT$\|^SRV$\|^LOC$\|^MX$\|^NS$\|^SPF$\|^CERT$\|^DNSKEY$\|^DS$\|^NAPTR$\|^SMIMEA$\|^SSHFP$\|^TLSA$\|^URI$" \
|| echoexit1 "incorrect type - allowed types: A, AAAA, CNAME, TXT, SRV, LOC, MX, NS, SPF, CERT, DNSKEY, DS, NAPTR, SMIMEA, SSHFP, TLSA, URI"
echo $DNS_ZONE | egrep -q "^[a-z0-9.*-]+\.[a-z0-9.-]+$" \
|| echoexit1 "incorrect domain - only full domain names allowed: example.com test.example.com"

[ "$CFPROXY" ] && recordadd="cf-dns-proxy-record-add" || recordadd="cf-dns-record-add"

[ "$CONTENT" == "@" ] && CONTENT=$MAIN_ZONE
[ "$NEW_CONTENT" == "@" ] && NEW_CONTENT=$MAIN_ZONE
[ "$CONTENT" == "$NEW_CONTENT" ] && echoexit1 Old and New DNS record content are the same - exit
#test $CFACC || CFACC=$(grep -s "${MAIN_ZONE}" /var/cld/modules/dns/data/cf/$(TZ=Europe/Moscow date +%F)/cf_dns_list | head -1 | cut -d _ -f 3)
#test $CFACC || CFACC=$(grep -s "${MAIN_ZONE}" /var/cld/modules/dns/data/cf/$(TZ=Europe/Moscow date +%F --date=yesterday)/cf_dns_list | head -1 | cut -d _ -f 3)
[ "$CFACC" ] && CFAPI=$(grep "$CFACC" /var/cld/creds/creds_dns_cf_api_list | grep -v "^#")
[ "$CFAPI" ] || for CFAPI in $(cat /var/cld/creds/creds_dns_cf_api_list | grep -v "^#")
do
cf-dns-api-creds
CF_ZONE_ID=$(cf-dns-get-zone-id ${MAIN_ZONE})
[ "${CF_ZONE_ID}" ] && break
done
(
[ "$CF_ZONE_ID" ] || echo "domain $MAIN_ZONE not found in known accounts - trying to add"
[ "$CF_ZONE_ID" ] || cf-dns-define-cf-api 
[ "$CF_ZONE_ID" ] || cf-dns-api-creds

[ "$CF_ZONE_ID" ] || for ITTER in $(seq 1 10)
do
CF_ZONE_ID=$(cf-dns-domain-add ${MAIN_ZONE})
[ "$CF_ZONE_ID" ] || CF_ZONE_ID=$(cf-dns-get-zone-id ${MAIN_ZONE})
[ "$CF_ZONE_ID" ] && echo "domain $MAIN_ZONE successfully added to account $CFACC"
[ "$CF_ZONE_ID" ] && break
done

CF_RECORD_RESULT=$(cf-dns-records-get $CF_ZONE_ID | jq ".result[] | select(.type == \"$TYPE\" and .name == \"$DNS_ZONE\")")
CF_RECORD_ID=$(echo "${CF_RECORD_RESULT}" |  jq -r .id)
CF_RECORD_CONTENT=$(echo "${CF_RECORD_RESULT}" |  jq -r .content)

[ "$CF_RECORD_CONTENT" == "$CONTENT" -a "$NEW_CONTENT" == "" -a "$FORCE" == "" ] && echoexit1 "Record $TYPE $DNS_ZONE $CONTENT already exist"
[ "$CF_RECORD_CONTENT" != "$CONTENT" -a "$NEW_CONTENT" != "" -a "$FORCE" == "" ] && echoexit1 "Record $TYPE $DNS_ZONE $CONTENT doesn't exist"

[ "$CF_RECORD_CONTENT" != "" -a "$CF_RECORD_CONTENT" != "$CONTENT" -a "$NEW_CONTENT" == "" -a "$FORCE" == "" ] && echoexit1 "There is already exist record $TYPE $DNS_ZONE $CF_RECORD_CONTENT
To aprove changes use arguments: $TYPE $DNS_ZONE ${CF_RECORD_CONTENT}_${CONTENT}
or use -force argument"

[ "$CF_RECORD_ID" != "" -a "$NEW_CONTENT" != "" ] && CF_RECORD_DELETE_RESULT=$(cf-dns-record-delete $TYPE $DNS_ZONE $CONTENT | jq -r .success)
[ "$CF_RECORD_ID" != "" -a "$NEW_CONTENT" != "" -a "$CF_RECORD_DELETE_RESULT" == "true" ] && echo "DNS record $TYPE $DNS_ZONE $CONTENT successfully deleted"
[ "$CF_RECORD_ID" != "" -a "$NEW_CONTENT" != "" -a "$CF_RECORD_DELETE_RESULT" == "false" ] && echoexit1 "DNS record $TYPE $DNS_ZONE $CONTENT delete error"
[ "$CF_RECORD_ID" != "" -a "$NEW_CONTENT" != "" -a "$CF_RECORD_DELETE_RESULT" == "true" ] && CONTENT=$NEW_CONTENT

[ "$CF_ZONE_ID" ] && CF_RECORD_ID=$($recordadd $TYPE $DNS_ZONE $CONTENT | jq -r ".result | select(.type == \"$TYPE\" and .content == \"$CONTENT\") | .id")
[ "$CF_RECORD_ID" ] || CF_RECORD_ID=$(cf-dns-records-get $CF_ZONE_ID | jq -r ".result[] | select(.type == \"$TYPE\" and .content == \"$CONTENT\") | .id")
[ "$CF_RECORD_ID" ] && echo "DNS record $TYPE $DNS_ZONE $CONTENT successfully added" || echo "Error - DNS RECORD didn't set"
[ "$CFPROXY" ]  && echo CF proxy enabled
) #| awk -v f="$F" -v b="$B" '{print f$0f}'