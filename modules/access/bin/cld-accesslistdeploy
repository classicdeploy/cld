#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Main access list deploy tool
Deploying access and block lists - affect INPUT iptables chain at the remote instances
Should be setted up on cron
EOL
)
HELP_ARGS=$(cat << 'EOL'
$1                             First PATTERN filtering allowed instances
$2                             Second PATTERN filtering allowed instances
$3                             Third PATTERN filtering allowed instances
--groups=GROUP1,GROUP2         Filtering by instance groups - default value is "default" group
--allowedgroups=GROUP1,GROUP2  Groups of instances which ip addresses will be added to accesslist together with /var/cld/modules/access/data/myips and /var/cld/modules/access/data/enabledips - default is the same as --groups or "default"
--mikrotik                     Enable access list deploy to Mikrotik
--all                          Admin user option - setting up for one time run with all groups existing at CLD server regardless to access matrix
--onupdate                     Flag for parsing cron by auditor service, if set at cron with that key - cron will execute after detected changes in module or tool relative files - see auditor file at root of module
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
cld-accesslistdeploy
cld-accesslistdeploy --groups=default,prod,hypervisors --allowedgroups=default
EOL
)
source /var/cld/bin/include/cldfuncs
source /var/cld/modules/access/bin/include/accessfuncs

init-load-constant --constant=NETWORK_POLICY --example=general --regex="(general|private|paranoid)" --default=general
init-load-constant --constant=CLD_IP --example=1.2.3.4 --default='$(wget -qO- ip.cldcloud.com)'

for i in ${CLDOPTS}
do
case $i in
-g=*|-groups=*|--groups=*) CLD_GROUPS="${i#*=}"                         ;;
-a=*|-allowedgroups=*|--allowedgroups=*) CLD_ALLOW_GROUPS="${i#*=}"     ;;
-m|-mikrotik|--mikrotik) MIKROTIK=1                                     ;;
-a|-all|--all) CLD_ALL_GROUPS_ARG="--all"                               ;;
-*)                                                                     ;;
*) let ii++; declare ARG$ii=${i}                                        ;;
esac
done

CLD_GROUPS=${CLD_GROUPS:-default}
[ "$CLD_ALLOW_GROUPS" ] || CLD_ALLOW_GROUPS=${CLD_GROUPS:-default}

CLD_ACCESS_LIST=$(cat << EOACCESSLIST
cat > /etc/hosts.deny.tmp << 'EOHOSTSBAN'
$(
grep -svh "^$\|^#" /var/cld/modules/access/data/banips | awk -F"_" '{print "sshd: "$1" # black ip of "$2}'
)
EOHOSTSBAN
cat > /etc/hosts.ports.tmp << 'EOHOSTSPORTS'
$(cat /var/cld/creds/protected_ports 2>/dev/null)
EOHOSTSPORTS

cat > /etc/hosts.localnets.tmp << 'EOHOSTSLOCALS'
$([ -s /var/cld/creds/local_nets ] && cat /var/cld/creds/local_nets || echo 172.16.0.0/24)
EOHOSTSLOCALS

cat > /etc/hosts.localnets6.tmp << 'EOHOSTSLOCALS'
$([ -s /var/cld/creds/local_nets6 ] && cat /var/cld/creds/local_nets6 || echo fdfb:bb7c:5000:553a:0000:0000:0000:0000/120)
EOHOSTSLOCALS

unalias mv &>/dev/null
mv /etc/hosts.allow.tmp /etc/hosts.allow
mv /etc/hosts.ports.tmp /etc/hosts.ports
mv /etc/hosts.localnets.tmp /etc/hosts.localnets
mv /etc/hosts.localnets6.tmp /etc/hosts.localnets6
EOACCESSLIST
)

CLD_ACCESS_DEPLOY=$(cat << 'EOACCESSDEPLOY'
ALLOWED_IPS_LINES=$(egrep "${IPV4REGEX}" /etc/hosts.allow | wc -w)
if [ "$ALLOWED_IPS_LINES" -ge "3" ] 
then
echo "sshd: ALL" >> /etc/hosts.deny.tmp
mv /etc/hosts.deny.tmp /etc/hosts.deny
else
truncate -s 0 /etc/hosts.deny
fi

cat > /etc/cron.d/hosts_deny_drop << 'EOCRON'
@reboot root bash -lc "truncate -s 0 /etc/hosts.deny"
@reboot root bash -lc "truncate -s 0 /root/sbin/iptables_access"
@reboot root bash -lc "truncate -s 0 /etc/cron.d/iptables_access"
@reboot root bash -lc "iptables -F"
EOCRON
chmod 644 /etc/cron.d/hosts_deny_drop

cat > /etc/cron.d/iptables_access << 'EOCRON'
MAILTO=""
* * * * * root bash -lc "ps axfu | grep -v grep | grep -q cldaccesslist || /bin/bash -l <(cat /root/sbin/iptables_access) cldaccesslist"
EOCRON
chmod 644 /etc/cron.d/iptables_access

mkdir -p /root/sbin/ &>/dev/null

cat > /root/sbin/iptables_access << 'EOIPTABLES'
#!/bin/bash
IPV4REGEX='((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3})'
IPV4REGEXCIDR="${IPV4REGEX}(\/([0-9]|[1-2][0-9]|3[0-2]))"
IPV6REGEX='s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*'
IPV6REGEXCIDR="${IPV6REGEX}(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))"

ALLOWED_IPS=$(cat << EOIPS
$(cat /etc/hosts.allow | awk '{print $2}' | sort -u | egrep -o "${IPV4REGEX}")
EOIPS
)

BAN_IPS=$(cat << EOIPS
$(cat /etc/hosts.deny | awk '{print $2}' | sort -u | egrep -o "${IPV4REGEX}")
EOIPS
)

ALLOWED_IPS6=$(cat << EOIPS
$(cat /etc/hosts.allow | awk '{print $2}' | sort -u | egrep -o "${IPV6REGEX}")
EOIPS
)

BAN_IPS6=$(cat << EOIPS
$(cat /etc/hosts.deny | awk '{print $2}' | sort -u | egrep -o "${IPV6REGEX}")
EOIPS
)

[ "$BAN_IPS" ] || BAN_IPS=172.31.255.254

[ "$BAN_IPS6" ] || BAN_IPS6=fdfb:bb7c:5000:553a:ffff:ffff:ffff:ffff

ALLOWED_IPS_LINES=$(wc -w <<< "$ALLOWED_IPS")

ALLOWED_IPS_LINES6=$(wc -w <<< "$ALLOWED_IPS6")

#Should be MORE than 1 ports
ALLOWED_PORTS="$(egrep "^([1-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(:([1-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?$" /etc/hosts.ports | sort -n -u)"
if ! [ "$ALLOWED_PORTS" ]
then
ALLOWED_PORTS=$(cat << 'EOPORTS'
21
22
5672
8006
8888
9090
10050
15672
25672
EOPORTS
)
fi

ALLOWED_PORTS_COUNT="15"
ALLOWED_PORTS_LEN=$(wc -w <<< "${ALLOWED_PORTS}")
ALLOWED_PORTS_MODULO=$(expr ${ALLOWED_PORTS_LEN} % ${ALLOWED_PORTS_COUNT})

while [ "${ALLOWED_PORTS_MODULO}" -eq "1" ]; do
let ALLOWED_PORTS_COUNT--
ALLOWED_PORTS_MODULO=$(expr ${ALLOWED_PORTS_LEN} % ${ALLOWED_PORTS_COUNT})
[ "${ALLOWED_PORTS_COUNT}" -eq "1" ] && exit 1
done

unset LOOPPORTS
itterp=0
for i in ${ALLOWED_PORTS}; do
if [ "$itterp" -eq "0" ]; then
LOOPPORTS="${LOOPPORTS} $i"; let itterp++
elif [ "$itterp" -eq "${ALLOWED_PORTS_COUNT}" ]; then
LOOPPORTS="$LOOPPORTS $i"; itterp=1
else
LOOPPORTS="${LOOPPORTS},$i"; let itterp++
fi
done

LOCAL_NETS="$(egrep "^${IPV4REGEXCIDR}$" /etc/hosts.localnets)"
if ! [ "$LOCAL_NETS" ]
then
LOCAL_NETS=$(cat << 'EOPORTS'
172.16.0.0/24
EOPORTS
)
fi

LOCAL_NETS6="$(egrep "^${IPV6REGEXCIDR}$" /etc/hosts.localnets6)"
if ! [ "$LOCAL_NETS6" ]
then
LOCAL_NETS6=$(cat << 'EOPORTS'
fdfb:bb7c:5000:553a:0000:0000:0000:0000/120
EOPORTS
)
fi

IPTABLES_CHECK_STATE=$(iptables-save)
echo "${IPTABLES_CHECK_STATE}" | grep -q cldinput ||  { iptables-save | grep -vi "cld" | iptables-restore ; IPTABLES_CHECK_STATE=$(iptables-save) ; }
echo "${IPTABLES_CHECK_STATE}" | grep -q cldinput || iptables -A INPUT -m comment --comment cldinput
echo "${IPTABLES_CHECK_STATE}" | grep -q ":CLDFILTER" || iptables -N CLDFILTER
echo "${IPTABLES_CHECK_STATE}" | grep -q cldaccess || iptables -A CLDFILTER -m comment --comment cldaccess
echo "${IPTABLES_CHECK_STATE}" | grep -q ":CLDACCEPT" || iptables -N CLDACCEPT
echo "${IPTABLES_CHECK_STATE}" | grep -q ":CLDDROP" || iptables -N CLDDROP
echo "${IPTABLES_CHECK_STATE}" | grep -q cldchain || iptables -A CLDACCEPT -m comment --comment cldchain

IPTABLES_CHECK_STATE6=$(ip6tables-save)
echo "${IPTABLES_CHECK_STATE6}" | grep -q cldinput ||  { ip6tables-save | grep -vi "cld" | ip6tables-restore ; IPTABLES_CHECK_STATE6=$(ip6tables-save) ; }
echo "${IPTABLES_CHECK_STATE}" | grep -q cldinput || ip6tables -A INPUT -m comment --comment cldinput
echo "${IPTABLES_CHECK_STATE}" | grep -q ":CLDFILTER" || ip6tables -N CLDFILTER
echo "${IPTABLES_CHECK_STATE}" | grep -q cldaccess || ip6tables -A CLDFILTER -m comment --comment cldaccess
echo "${IPTABLES_CHECK_STATE}" | grep -q ":CLDACCEPT" || ip6tables -N CLDACCEPT
echo "${IPTABLES_CHECK_STATE}" | grep -q ":CLDDROP" || ip6tables -N CLDDROP
echo "${IPTABLES_CHECK_STATE}" | grep -q cldchain || ip6tables -A CLDACCEPT -m comment --comment cldchain

if [ "$ALLOWED_IPS_LINES" -lt "3" ]
then
iptables-save | grep -v DROP | iptables-restore
ip6tables-save | grep -v DROP | ip6tables-restore
truncate -s 0 /etc/hosts.deny
exit 1
elif ! [ "$ALLOWED_IPS_LINES" ]
then
iptables-save | grep -v DROP | iptables-restore
ip6tables-save | grep -v DROP | ip6tables-restore
truncate -s 0 /etc/hosts.deny
exit 1
fi

IPTABLES_STATE="$(iptables-save)"

if grep -q "cldaccess" <<< "${IPTABLES_STATE}"
then
FIRST_LINE=$(grep -nh cldinput <<< "${IPTABLES_STATE}" | head -1 | cut -d : -f 1)
SECOND_LINE=$(grep -nh cldinput <<< "${IPTABLES_STATE}" | tail -1 | cut -d : -f 1)
THIRD_LINE=$(grep -nh cldaccess <<< "${IPTABLES_STATE}" | head -1 | cut -d : -f 1)
FOURTH_LINE=$(grep -nh cldchain <<< "${IPTABLES_STATE}" | tail -1 | cut -d : -f 1)
FIRST_PART=$(head -n $((${FIRST_LINE}-1)) <<< "${IPTABLES_STATE}")
SECOND_PART=$(sed -n "$((${SECOND_LINE}+1)),$((${THIRD_LINE}-1))p;${THIRD_LINE}q" <<< "${IPTABLES_STATE}" | grep -v "cldforward")
THIRD_PART=$(tail -n +$((${FOURTH_LINE}+1)) <<< "${IPTABLES_STATE}")
CURRENT_STATE_HASH=$(echo "${IPTABLES_STATE}" | grep "cldinput\|cldforward\|cldaccess\|cldchain" | sort -u | md5sum | awk '{print $1}')
NEW_STATE=$(cat << EOSTATE
$FIRST_PART

-A INPUT -m comment --comment cldinput -j CLDFILTER
-A INPUT -m comment --comment cldinput -j CLDDROP

$(
which docker &>/dev/null && {
for network in $(docker network ls --format '{{.Name}}' | grep bridge);
do
    docker network inspect $network | grep "com.docker.network.bridge.name" | cut -d '"' -f 4 | awk '{print "-A FORWARD -o "$1" -m comment --comment cldforward -j CLDFILTER" }'
done
}
)

$SECOND_PART

$(
for BAN_IP in $BAN_IPS
do
echo "-A CLDFILTER -s ${BAN_IP}/32 -m comment --comment cldaccess -j DROP"
done

echo "-A CLDFILTER -m state --state RELATED,ESTABLISHED -m comment --comment cldaccess -j ACCEPT"
for LOCAL_NET in $LOCAL_NETS
do
echo "-A CLDFILTER -s ${LOCAL_NET} -m comment --comment cldaccess -j CLDACCEPT"
done

for IP in $ALLOWED_IPS
do
echo "-A CLDFILTER -s ${IP}/32 -m comment --comment cldaccess -j CLDACCEPT"
done
)
$(for LOOPPORT in ${LOOPPORTS}; do
cat << EOLOOPPORT
-A CLDACCEPT -p tcp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j ACCEPT
-A CLDACCEPT -p udp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j ACCEPT
-A CLDDROP -p tcp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j DROP
-A CLDDROP -p udp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j DROP
EOLOOPPORT
done)

$THIRD_PART
EOSTATE
)
echo "$NEW_STATE" | grep "cldinput\|cldforward\|cldaccess\|cldchain" | sort -u
NEW_STATE_HASH=$(echo "$NEW_STATE" | grep "cldinput\|cldforward\|cldaccess\|cldchain" | sort -u | md5sum | awk '{print $1}')
if [ "$CURRENT_STATE_HASH" != "$NEW_STATE_HASH" ]
then
iptables-restore << EOACCESS
${NEW_STATE}
EOACCESS
fi
fi

IPTABLES_STATE6="$(ip6tables-save)"

if grep -q "cldaccess" <<< "${IPTABLES_STATE6}"
then
FIRST_LINE=$(grep -nh cldinput <<< "${IPTABLES_STATE6}" | head -1 | cut -d : -f 1)
SECOND_LINE=$(grep -nh cldinput <<< "${IPTABLES_STATE6}" | tail -1 | cut -d : -f 1)
THIRD_LINE=$(grep -nh cldaccess <<< "${IPTABLES_STATE6}" | head -1 | cut -d : -f 1)
FOURTH_LINE=$(grep -nh cldchain <<< "${IPTABLES_STATE6}" | tail -1 | cut -d : -f 1)
FIRST_PART=$(head -n $((${FIRST_LINE}-1)) <<< "${IPTABLES_STATE6}")
SECOND_PART=$(sed -n "$((${SECOND_LINE}+1)),$((${THIRD_LINE}-1))p;${THIRD_LINE}q" <<< "${IPTABLES_STATE6}" | grep -v "cldforward")
THIRD_PART=$(tail -n +$((${FOURTH_LINE}+1)) <<< "${IPTABLES_STATE6}")
CURRENT_STATE_HASH=$(echo "${IPTABLES_STATE6}" | grep "cldinput\|cldforward\|cldaccess\|cldchain" | sort -u | md5sum | awk '{print $1}')
NEW_STATEV6=$(cat << EOSTATEV6
$FIRST_PART

-A INPUT -m comment --comment cldinput -j CLDFILTER
-A INPUT -m comment --comment cldinput -j CLDDROP

$(
which docker &>/dev/null && {
for network in $(docker network ls --format '{{.Name}}' | grep bridge);
do
    docker network inspect $network | grep "com.docker.network.bridge.name" | cut -d '"' -f 4 | awk '{print "-A FORWARD -o "$1" -m comment --comment cldforward -j CLDFILTER" }'
done
}
)

$SECOND_PART

$(
for BAN_IP in $BAN_IPS6
do
echo "-A CLDFILTER -s ${BAN_IP}/128 -m comment --comment cldaccess -j DROP"
done

echo "-A CLDFILTER -m state --state RELATED,ESTABLISHED -m comment --comment cldaccess -j ACCEPT"
for LOCAL_NET in $LOCAL_NETS6
do
echo "-A CLDFILTER -s ${LOCAL_NET} -m comment --comment cldaccess -j CLDACCEPT"
done

for IP in $ALLOWED_IPS6
do
echo "-A CLDFILTER -s ${IP}/128 -m comment --comment cldaccess -j CLDACCEPT"
done
)
$(for LOOPPORT in ${LOOPPORTS}; do
cat << EOLOOPPORT
-A CLDACCEPT -p tcp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j ACCEPT
-A CLDACCEPT -p udp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j ACCEPT
-A CLDDROP -p tcp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j DROP
-A CLDDROP -p udp -m multiport --dports ${LOOPPORT} -m comment --comment cldchain -j DROP
EOLOOPPORT
done)

$THIRD_PART
EOSTATEV6
)

NEW_STATEV6_HASH=$(echo "$NEW_STATEV6" | grep "cldinput\|cldforward\|cldaccess\|cldchain" | sort -u | md5sum | awk '{print $1}')
if [ "$CURRENT_STATEV6_HASH" != "$NEW_STATEV6_HASH" ]
then
ip6tables-restore << EOACCESS
${NEW_STATEV6}
EOACCESS
fi
fi

EOIPTABLES
chmod 700 /root/sbin/iptables_access
ps axfu | grep -v grep | grep -q accesslist || /bin/bash -l <(cat /root/sbin/iptables_access) accesslist
EOACCESSDEPLOY
)

GENERAL_HOST_LIST=$(cat << EOHOSTLIST
cat > /etc/hosts.allow.tmp << 'EOHOSTSACCESS'
$(
echo "127.0.0.1" | awk '{print "sshd: "$1" # localhost"}'
echo "$CLD_IP" | egrep -o "${IPV4REGEX}" | awk '{print "sshd: "$1" # CLD ip"}'
grep -vh "^$\|^#" /var/cld/modules/access/data/myips | egrep "${IPV4REGEX}_" | awk -F"_" '{print "sshd: "$1" # private ip of "$3"-"$4}'
grep -vh "^$\|^#" /var/cld/modules/access/data/enabledips | egrep "${IPV4REGEX}_" | awk -F"_" '{print "sshd: "$1" # manual enabled ip of "$2}'
CLOUDS_USER_ALLOWED --groups="${CLD_ALLOW_GROUPS}" | egrep "${IPV4REGEX}_" | awk -F"_" '{print "sshd: "$2" # auto enabled ip of "$1}'
echo "::1" | awk '{print "sshd: ["$1"] # localhost"}'
echo "$CLD_IP" | egrep -o "${IPV6REGEX}" | awk '{print "sshd: ["$1"] # CLD ip"}'
grep -vh "^$\|^#" /var/cld/modules/access/data/myips | egrep "${IPV6REGEX}_" | awk -F"_" '{print "sshd: ["$1"] # private ip of "$3"-"$4}'
grep -vh "^$\|^#" /var/cld/modules/access/data/enabledips | egrep "${IPV6REGEX}_" | awk -F"_" '{print "sshd: ["$1"] # manual enabled ip of "$2}'
CLOUDS_USER_ALLOWED --groups="${CLD_ALLOW_GROUPS}" | egrep "${IPV6REGEX}_" | awk -F"_" '{print "sshd: ["$2"] # auto enabled ip of "$1}'
)
EOHOSTSACCESS
EOHOSTLIST
)

if [ "${NETWORK_POLICY}" != "general" ]; then
head -1 /var/cld/tmp/auditor/current_access_map | egrep -q "/var/cld/tmp/access_instances_[A-Za-z0-9]{7}"  && CLD_FILTER_DIR=$(head -1 /var/cld/tmp/auditor/current_access_map) || generate_access_map
ALL_CLD_USERS="$(grep -v "^#\|^$" /var/cld/creds/passwd | cut -d : -f 1)"
for CLD_USER in ${ALL_CLD_USERS}
do
export accesslist_$(sed -e 's#\.#__DOT__#g' -e 's#-#__DASH__#g' <<< "${CLD_USER}")="$(
grep -h "_${CLD_USER}@" /var/cld/modules/access/data/myips | egrep "${IPV4REGEX}_" | awk -F"_" '{print "sshd: "$1" # private ip of "$3"-"$4}'
grep -h "_${CLD_USER}@" /var/cld/modules/access/data/enabledips | egrep "${IPV4REGEX}?_" | awk -F"_" '{print "sshd: "$1" # manual enabled ip of "$2}'
grep -h "_${CLD_USER}@" /var/cld/modules/access/data/myips | egrep "${IPV6REGEX}_" | awk -F"_" '{print "sshd: ["$1"] # private ip of "$3"-"$4}'
grep -h "_${CLD_USER}@" /var/cld/modules/access/data/enabledips | egrep "${IPV6REGEX}_" | awk -F"_" '{print "sshd: ["$1"] # manual enabled ip of "$2}'
)"

COMMON_IPS="$(
echo "127.0.0.1" | awk '{print "sshd: "$1" # localhost"}'
echo "$CLD_IP" | egrep -o "${IPV4REGEX}" | awk '{print "sshd: "$1" # CLD ip"}' 
echo "::1" | awk '{print "sshd: ["$1"] # localhost"}'
echo "$CLD_IP" | egrep -o "${IPV6REGEX}" | awk '{print "sshd: ["$1"] # CLD ip"}'
)"   
done
cld_host_list=privatehostlist
else
cld_host_list=generalhostlist
fi

generalhostlist()
{
cat << EOHOSTLIST
${GENERAL_HOST_LIST}
EOHOSTLIST
}

privatehostlist()
{
cat << EOPRIVATEHOSTLIST
cat > /etc/hosts.allow.tmp << 'EOHOSTSACCESS'
${COMMON_IPS}
$(for ACCESSLISTUSER in $(cat ${CLD_FILTER_DIR}/instances/${INSTANCE})
do
ACCESSLIST_VAR="accesslist_$(sed -e 's#\.#__DOT__#g' -e 's#-#__DASH__#g' <<< ${ACCESSLISTUSER})"
echo "${!ACCESSLIST_VAR}"
done | sort -u)
EOHOSTSACCESS
EOPRIVATEHOSTLIST
}

if [ "$(echo $CLD_GROUPS | grep -o "default")" = "default" -a  "$(echo $CLD_ALLOW_GROUPS | grep -o "default")" = "default" ]
then
cat << EOL | bash
$(generalhostlist)
$([ -d "/var/cld/modules/access/data/instances/cld" ] && instancelistgen cld || echo "$CLD_ACCESS_LIST")
$CLD_ACCESS_DEPLOY
EOL
bash -lc "/root/sbin/iptables_access"
fi

############## Deploy begin ##############
for CLD_ACCESS_GROUP in $(echo "${CLD_GROUPS}" | tr ',' '\n')
do

if [ -d "/var/cld/modules/access/data/groups/$CLD_ACCESS_GROUP" ]
then
CLD_ACCESS_LIST_DEFAULT="$(grouplistgen ${CLD_ACCESS_GROUP})"
else
CLD_ACCESS_LIST_DEFAULT="$CLD_ACCESS_LIST"
fi

for INSTANCE in $(CLOUDS_USER_ALLOWED --groups="${CLD_ACCESS_GROUP}" "$ARG1" "$ARG2" "$ARG3" "$CLD_ALL_GROUPS_ARG" | sort -u)
do
VM="${INSTANCE}"
if [ "$INSTANCE" ]
then
INSTANCE_GROUP_FUNCS
$CLD_VARS
export TIMEOUT_NOTTY=30
(
$CLD_DEPLOY_NOTTY << EOSSH && echo "${INSTANCE} - done" || echo "${INSTANCE} - FAIL"
$($cld_host_list)
$([ -d "/var/cld/modules/access/data/instances/$INSTANCE" ] && instancelistgen $INSTANCE || echo "$CLD_ACCESS_LIST_DEFAULT")
$CLD_ACCESS_DEPLOY
EOSSH
) &
fi
done

done

wait
##############  Deploy end  ##############

if [ "${MIKROTIK}" = "1" ]
then
init-load-constants MIKROTIK_USER\|admin MIKROTIK_PASSWORD\|Y0uRM1kr071Kp455W0rD MIKROTIK_HOST\|1.2.3.4
ACCESS_LIST=$(cat << EOACCESSLIST
$({
grep -vh "^$\|^#" /var/cld/modules/access/data/myips | awk -F"_" '{print "add list=access_list address="$1"/32 comment=\x22"$3"-"$4"\x22"}';
grep -vh "^$\|^#"  /var/cld/modules/access/data/enabledips | awk -F"_" '{print "add list=access_list address="$1"/32 comment=\x22"$2"-"$3"\x22"}' | grep -v "172.16.0.\|127.0.0.1";
grep -vh "^$\|^#" /var/cld/access/groups/*/clouds | awk -F"_" '{print "add list=access_list address="$2"/32 comment=\x22"$1"\x22"}';
} | sort -t ' ' -k 3 | awk 'BEGIN{curr="";prev="";flag=0}; {prev=curr; curr=$3; if(prev!=curr){flag=1}; if(flag!=0 && prev==curr)flag++; if(flag==1)print $0}' | sed -e ':a;N;$!ba;s#\n# ; #g')
EOACCESSLIST
)
timeout 30s sshpass -p "${MIKROTIK_PASSWORD}" ssh ${MIKROTIK_USER}@${MIKROTIK_HOST} "/ip firewall address-list remove [/ip firewall address-list find list=\"access_list\"] ; /ip firewall address-list ; add list=access_list address=172.16.0.0/24 comment=\"local network\" ; $ACCESS_LIST"
fi