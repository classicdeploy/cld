#!/bin/bash
HELP_DESC=$(cat << 'EOL'
Main Classic DevOps CLI utility
EOL
)
HELP_ARGS=$(cat << 'EOL'
--run                              Start deploy in non-interactive mode - interactive mode all other cases
--deploy=deployname                Name of deploy - required if non-interactive mode
--template=templatename            Name of template - to create deploy from template - interactive mode
$1                                 First PATTERN filtering existing deploys - interactive mode
$2                                 Second PATTERN filtering existing deploys - interactive mode
$3                                 Third PATTERN filtering existing deploys - interactive mode
--debug                            Verbose output of connection
--clouds=srv_1.2.3.4               Instance pattern or list comma separated
--groups=GROUP1,GROUP2             Filtering by instance groups
--test=0                           Execute test script after deploy - 0 is disabled - 1 is enabled
--testprint=0                      Perform test script output after deploy (depend on --test argument) - 0 is disabled - 1 is enabled
--retry=1                          Count of retry deploy attempts per instance if ssh connection not established
--timeout=180                      Timeout of deploy script in seconds
--testtimeout=180                  Timeout of test script in seconds
--backuptimeout=180                Timeout for backup/custombackup script         
--nextdeploy=deploy2               Using for deploy chains - blank field for single deploy
--nextdeploywait=1                 Wait the end of current deploy before start next
--nextdeployargs=--run,--test=1    Next deploy arguments comma separated
--backup=0                         Backup files of filelist before deploy - 0 is disabled - 1 is enabled
--backuplist=/etc/,/tmp/file       List of files and directories for backup before deploy
--custombackup=0                   Use custom backup script before deploy - 0 is disabled - 1 is enabled
--async=1                          Synchronous or asynchronous mode of deploy - 0 is sync - 1 is async
--debug=0                          Verbose mode of connect and additional predeploy scripts will put to the output
--output=full|bw|min               Output deploy format - full is default
--vars=var1=value1,var2=value2     Pass variables to deploy
EOL
)
HELP_EXAMPLES=$(cat << 'EOL'
cld-deploy #CLI
cld-deploy deployname #CLI
cld-deploy --run --deploy=deployname --backup=1 --backuplist=/etc/nginx/ --async=1 --clouds=frontend
EOL
)
source /var/cld/bin/include/cldfuncs
source /var/cld/deploy/bin/include/deployfuncs
unalias cp &>/dev/null

ARG1=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -1)
ARG2=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -2 | tail -1)
ARG3=$(echo "${@:1}" | tr ' ' '\n' | grep -v '\--' | head -3 | tail -1)

for i in ${CLDOPTS}
do
case $i in
-d=*|-deploy=*|--deploy=*) DEPLOY="${i#*=}"         ;;
-t=*|-template=*|--template=*) TEMPLATE="${i#*=}"   ;;
-r|-run|--run) RUN=1                                ;;
-l|-list|--list) LIST=1                             ;;
-j|-json|--json) JSON=1                             ;;
-b|-beauty|--beauty) JSON_BEAUTY=1                  ;;
*) ;;
esac
done

[ "$JSON" == "1" ] && JSONARG='--json'
[ "$JSON_BEAUTY" == "1" -a "$FROM" == "API" ] && JSON_BEAUTY_ARG='| jq . -C'
[ "$JSON_BEAUTY" == "1" -a "$FROM" != "API" ] && JSON_BEAUTY_ARG='| jq .'

if [ "$LIST" = "1" ] ; then source <(echo -n deploys-user-allowed "${JSONARG}" ${JSON_BEAUTY_ARG}) ; exit 0 ; fi

if [ "$FROM" = "API" ] 
then
RUN=1
fi 

if [ "$RUN" != "1" -a "$DEPLOY" = "" -a  "$TEMPLATE" = "" ]
then
START_ARRAY=("New deploy" "Existing deploy" "Existing template")
echo "Run action from:"
select START_CASE in "${START_ARRAY[@]}"
do
[ "$START_CASE" == "New deploy" ] && CREATE_NEW=1 && break
[ "$START_CASE" == "Existing deploy" ] && FROM_DEPLOYS=1 && break
[ "$START_CASE" == "Existing template" ] && FROM_TEMPLATES=1 && break
done
elif [ "$DEPLOY" ]
then
FROM_DEPLOYS=1
elif [ "$TEMPLATE" ]
then
FROM_TEMPLATES=1
fi

if [ "$DEPLOY" == "" -a "$RUN" != "1" -a "$CREATE_NEW" == "1" ]
then
while ! [[ "$DEPLOY" =~  [A-Za-z0-9-]+ ]]
do
echo "Please enter the deploy name using only A-Z a-z 0-9 - symbols"
read DEPLOY
done

[ -d /var/cld/deploy/deploys/${DEPLOY} ] && DEPLOY_EXIST=1
DEPLOY_ID=$(ls -d /var/cld/deploy/deploys/${DEPLOY}_* 2>/dev/null | tail -1 | egrep -o "_[0-9]+$" | tr -d _)
[ "$DEPLOY_ID" != "" -o "$DEPLOY_EXIST" == "1" ] && let "DEPLOY_ID++"
[ "$DEPLOY_ID" ] && DEPLOY="${DEPLOY}_${DEPLOY_ID}"
mkdir -p /var/cld/deploy/deploys/${DEPLOY}

defaultvars
cat > /var/cld/deploy/deploys/${DEPLOY}/vars << EOVARS
DESCRIPTION="${DESCRIPTION}"
CLD_GROUPS="${CLD_GROUPS}"
BACKUP="${BACKUP}"
CUSTOM_BACKUP="${CUSTOM_BACKUP}"
TEST="${TEST}"
TEST_PRINT="${TEST_PRINT}"
RETRY="${RETRY}"
TIMEOUT="${TIMEOUT}"
TEST_TIMEOUT="${TEST_TIMEOUT}"
BACKUP_TIMEOUT="${BACKUP_TIMEOUT}"
ASYNC="${ASYNC}"
NEXT_DEPLOY="${NEXT_DEPLOY}"
NEXT_DEPLOY_WAIT="${NEXT_DEPLOY_WAIT}"
NEXT_DEPLOY_ARGS="${NEXT_DEPLOY_ARGS}"
DEBUG="${DEBUG}"
CRON="${CRON}"
EOVARS
fi

if [ "$DEPLOY" == "" -a "$FROM_TEMPLATES" == "1" ]
then

if  [ "$TEMPLATE" = "" ]
then
echo "Please choose template:"
echo
select TEMPLATE_SELECT in $(ls /var/cld/deploy/templates/)
do
[ "$TEMPLATE_SELECT" ] && TEMPLATE=$TEMPLATE_SELECT
[ "$TEMPLATE_SELECT" ] && echo -e "\e[48;5;6m          \e[K\e[00m"
[ "$TEMPLATE_SELECT" ] && break
done
fi

[ -d /var/cld/deploy/deploys/${TEMPLATE} ] && DEPLOY_EXIST=1
DEPLOY_ID=$(ls -d /var/cld/deploy/deploys/${TEMPLATE}_* 2>/dev/null | tail -1 | egrep -o "_[0-9]+$" | tr -d _)
test "$DEPLOY_ID" != "" -o "$DEPLOY_EXIST" == "1" && let "DEPLOY_ID++"
test "$DEPLOY_ID" && DEPLOY="${TEMPLATE}_${DEPLOY_ID}" || DEPLOY="${TEMPLATE}"

[ -d /var/cld/deploy/deploys ] || mkdir -p /var/cld/deploy/deploys
cp -r /var/cld/deploy/templates/${TEMPLATE} /var/cld/deploy/deploys/${DEPLOY}

defaultvars
cat > /var/cld/deploy/deploys/${DEPLOY}/vars << EOVARS
DESCRIPTION="${DESCRIPTION}"
CLD_GROUPS="${CLD_GROUPS}"
BACKUP="${BACKUP}"
CUSTOM_BACKUP="${CUSTOM_BACKUP}"
TEST="${TEST}"
TEST_PRINT="${TEST_PRINT}"
RETRY="${RETRY}"
TIMEOUT="${TIMEOUT}"
TEST_TIMEOUT="${TEST_TIMEOUT}"
BACKUP_TIMEOUT="${BACKUP_TIMEOUT}"
ASYNC="${ASYNC}"
NEXT_DEPLOY="${NEXT_DEPLOY}"
NEXT_DEPLOY_WAIT="${NEXT_DEPLOY_WAIT}"
NEXT_DEPLOY_ARGS="${NEXT_DEPLOY_ARGS}"
DEBUG="${DEBUG}"
CRON="${CRON}"
EOVARS
fi

[ "$DEPLOY" ] && DEPLOY=$(deploys-user-allowed | grep "${DEPLOY}" | tail -1)

[ "$DEPLOY" == "" -a "$RUN" == "1" ] && echoexit1 Deploy is not defined
if [ "$DEPLOY" == "" -a "$RUN" != "1" -a "$FROM_DEPLOYS" == "1" ]
then
echo "Please choose deploy:"
echo
select DEPLOY_SELECT in $(deploys-user-allowed | grep "$ARG1" | grep "$ARG2" | grep "$ARG3")
do
[ "$DEPLOY_SELECT" ] && DEPLOY=$DEPLOY_SELECT
[ "$DEPLOY_SELECT" ] && echo -e "\e[48;5;6m          \e[K\e[00m"
[ "$DEPLOY_SELECT" ] && break
done
fi

[ -d /var/cld/deploy/deploys/${DEPLOY} ] || echoexit1 Deploy is not exist
[ "$DEPLOY" ] && source /var/cld/deploy/deploys/${DEPLOY}/vars

for i in ${CLDOPTS}
do
case $i in
-c=*|-clouds=*|--clouds=*) CLOUDS=$(tr ',' '\n' <<< "${i#*=}")                              ;;
-g=*|-groups=*|--groups=*) CLD_GROUPS="${i#*=}"                                             ;;
-T=*|-test=*|--test=*) TEST="${i#*=}"                                                       ;;
-TP=*|-testprint=*|--testprint=*) TEST_PRINT="${i#*=}"                                      ;;
-R=*|-retry=*|--retry=*) RETRY="${i#*=}"                                                    ;;
-to=*|-timeout=*|--timeout=*) TIMEOUT="${i#*=}"                                             ;;
-tt=*|-testtimeout=*|--testtimeout=*) TEST_TIMEOUT="${i#*=}"                                ;;
-bt=*|-backuptimeout=*|--backuptimeout=*) BACKUP_TIMEOUT="${i#*=}"                          ;;
-nd=*|-nextdeploy=*|--nextdeploy=*) NEXT_DEPLOY="${i#*=}"                                   ;;
-ndw=*|-nextdeploywait=*|--nextdeploywait=*) NEXT_DEPLOY_WAIT="${i#*=}"                     ;;
-nda=*|-nextdeployargs=*|--nextdeployargs=*) NEXT_DEPLOY_ARGS=$(tr ',' ' ' <<< "${i#*=}")   ;;
-b=*|-backup=*|--backup=*) BACKUP="${i#*=}"                                                 ;;
-bl=*|-backuplist=*|--backuplist=*) BACKUP_LIST=$(tr ',' '\n' <<< "${i#*=}")                ;;
-cb=*|-custombackup=*|--custombackup=*) CUSTOM_BACKUP="${i#*=}"                             ;;
-a=*|-async=*|--async=*) ASYNC="${i#*=}"                                                    ;;
-D=*|-debug=*|--debug=*) DEBUG="${i#*=}"                                                    ;;
-C=*|-cron=*|--cron=*) CRON="${i#*=}"                                                       ;;
-o=*|-output=*|--output=*) CLD_DEPLOY_OUTPUT="${i#*=}"                                      ;;
-V=*|-vars=*|--vars=*) CLD_DEPLOY_VARIABLES="${i#*=}"                                       ;;
*) ;;
esac
done

if [ "$CLD_DEPLOY_VARIABLES" ]
then
    CLD_DEPLOY_VARIABLES=$(echo "${CLD_DEPLOY_VARIABLES}" | tr ',' '\n' | egrep "^[A-Za-z0-9_-]+=")
fi

[ "$BACKUP" == 1 -a "$BACKUP_LIST" == "" ] && BACKUP_LIST="$(cat /var/cld/deploy/deploys/${DEPLOY}/backup_list 2>/dev/null)"

[ "$CLOUDS" ] || CLOUDS="$(cat /var/cld/deploy/deploys/${DEPLOY}/clouds 2>/dev/null)"
[ "$CLOUDS" == "" -a "$RUN" == "1" ] && echoexit1 "CLOUDS is not defined"

ACTION_PREFIX=$(date +%d%m%Y_%H-%M-%S)
ACTION_NAME=${DEPLOY}_${ACTION_PREFIX}
mkdir -p /var/cld/deploy/actions/${DEPLOY} &>/dev/null
cp -r /var/cld/deploy/deploys/${DEPLOY} /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}
[ "$CLOUDS" ] && echo "${CLOUDS}" > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds
[ "$BACKUP_LIST" ] && echo "${BACKUP_LIST}" > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list

[ "$RETRY" ] || RETRY=1
[ "$TEST_PRINT" ] || TEST_PRINT=0
[ "$TIMEOUT" ] || TIMEOUT=600
[ "$TEST_TIMEOUT" ] || TEST_TIMEOUT=120
[ "$BACKUP_TIMEOUT" ] || BACKUP_TIMEOUT=120

cat > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/vars << EOVARS
DESCRIPTION="${DESCRIPTION}"
CLD_GROUPS="${CLD_GROUPS}"
BACKUP="${BACKUP}"
CUSTOM_BACKUP="${CUSTOM_BACKUP}"
TEST="${TEST}"
TEST_PRINT="${TEST_PRINT}"
RETRY="${RETRY}"
ASYNC="${ASYNC}"
TIMEOUT="${TIMEOUT}"
TEST_TIMEOUT="${TEST_TIMEOUT}"
BACKUP_TIMEOUT="${BACKUP_TIMEOUT}"
NEXT_DEPLOY="${NEXT_DEPLOY}"
NEXT_DEPLOY_WAIT="${NEXT_DEPLOY_WAIT}"
NEXT_DEPLOY_ARGS="${NEXT_DEPLOY_ARGS}"
DEBUG="${DEBUG}"
CRON="${CRON}"
EOVARS

if [ "$RUN" != "1" ]
then
echo Action config: "$(echo;cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/vars)"
echo
select DEPLOY_CONFIG_SELECT in continue edit
do
[ "$DEPLOY_CONFIG_SELECT" == "continue" ] && echo -n ""
[ "$DEPLOY_CONFIG_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/vars
[ "$DEPLOY_CONFIG_SELECT" == "continue" -o "$DEPLOY_CONFIG_SELECT" == "edit" ] && echo -e "\e[48;5;6m          \e[K\e[00m"
[ "$DEPLOY_CONFIG_SELECT" == "continue" -o "$DEPLOY_CONFIG_SELECT" == "edit" ] && break
done
fi

source /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/vars
[ "${RETRY}" == "0" ] && RETRY=1

if [ "$BACKUP" == "1" -a "$RUN" != "1" ]
then
    if [ -f /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list -a "$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list 2>/dev/null | wc -w)" != "0" ]
    then
    echo Backup file list is: "$(echo;cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list)" || \
    echo
    select BACKUP_LIST_SELECT in continue edit
    do
    [ "$BACKUP_LIST_SELECT" == "continue" ] && echo -n ""
    [ "$BACKUP_LIST_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list
    echo -e "\e[48;5;6m          \e[K\e[00m"
    break
    done
    else
    echo Backup file list is EMPTY
    select BACKUP_LIST_SELECT in edit
    do
        if [ "$BACKUP_LIST_SELECT" == "edit" ] 
        then
        cat > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list << 'EOBACKULIST'
##################################
# Backup file and directory list #
# example usage:                 #
# /etc/passwd                    #
# /etc/ssh/                      #
##################################
EOBACKULIST
        nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list
        sed -i -e "/^$/d" -e "/^#/d"  /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list
        echo -e "\e[48;5;6m          \e[K\e[00m"
        break
        fi
    done
    fi
fi

if [ "$RUN" != "1" ]
then
    if [ -f /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds -a "$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds 2>/dev/null | wc -w)" != "0" ]
        then
        echo Instance list is: "$(echo;cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds)"
        echo
        select INSTANCE_LIST_SELECT in continue edit
        do
        [ "$INSTANCE_LIST_SELECT" == "continue" ] && echo -n ""
        [ "$INSTANCE_LIST_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds
        [ "$INSTANCE_LIST_SELECT" == "continue" -o "$INSTANCE_LIST_SELECT" == "edit" ] && echo -e "\e[48;5;6m          \e[K\e[00m"
        [ "$INSTANCE_LIST_SELECT" == "continue" -o "$INSTANCE_LIST_SELECT" == "edit" ] && break
        done
        else
           echo Instance list is EMPTY
    select INSTANCE_LIST_SELECT in edit
    do
        if [ "$INSTANCE_LIST_SELECT" == "edit" ] 
        then
        cat > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds << 'EOINSTANCELIST'
####################################
# Instance list                    #
# example usage:                   #
# instance-name_1.2.3.4_22_root    #
# instance2.*                      #
# .*                               #
####################################
EOINSTANCELIST
        nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds
        sed -i -e "/^$/d" -e "/^#/d" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds
        sed -i -e "/^$/d" -e "/^#/d" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds
        echo -e "\e[48;5;6m          \e[K\e[00m"
        break
        fi
        done
    fi
fi

if [ "$RUN" != "1" ]
then
    if [ -f /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script -a "$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script 2>/dev/null | wc -w)" != "0" ]
        then
        echo Deploy script is: "$(echo;cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script)"
        echo
        select DEPLOY_SCRIPT_SELECT in continue edit
        do
        [ "$DEPLOY_SCRIPT_SELECT" == "continue" ] && echo -n ""
        [ "$DEPLOY_SCRIPT_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script
        [ "$DEPLOY_SCRIPT_SELECT" == "continue" -o "$DEPLOY_SCRIPT_SELECT" == "edit" ] && echo -e "\e[48;5;6m          \e[K\e[00m"
        [ "$DEPLOY_SCRIPT_SELECT" == "continue" -o "$DEPLOY_SCRIPT_SELECT" == "edit" ] && break
        done
        else
           echo Deploy script file is EMPTY
    select DEPLOY_SCRIPT_SELECT in edit
    do
        if [ "$DEPLOY_SCRIPT_SELECT" == "edit" ] 
        then
        cat > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script << 'EOINSTANCELIST'
####################################
# Deploy script                    #
# example usage:                   #
# yum install htop -y              #
# echo test > /tmp/test            #
#                                  #
# Delete this text before writing  #  
# Or it will put in deploy log     #
####################################
EOINSTANCELIST
        nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script
        echo -e "\e[48;5;6m          \e[K\e[00m"
        break
        fi
        done
    fi
fi

if [ "$TEST" == 1 -a "$RUN" != "1" ]
then
    if [ -f /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script -a "$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script 2>/dev/null | wc -w)" != "0" ]
        then
        echo Test script is: "$(echo;cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script)"
        echo
        select TEST_SCRIPT_SELECT in continue edit
        do
        [ "$TEST_SCRIPT_SELECT" == "continue" ] && echo -n ""
        [ "$TEST_SCRIPT_SELECT" == "edit" ] && nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script
        [ "$TEST_SCRIPT_SELECT" == "continue" -o "$TEST_SCRIPT_SELECT" == "edit" ] && echo -e "\e[48;5;6m          \e[K\e[00m"
        [ "$TEST_SCRIPT_SELECT" == "continue" -o "$TEST_SCRIPT_SELECT" == "edit" ] && break
        done
        else
           echo Test script file is EMPTY
    select TEST_SCRIPT_SELECT in edit
    do
        if [ "$TEST_SCRIPT_SELECT" == "edit" ] 
        then
        cat > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script << 'EOINSTANCELIST'
#########################################################
# # Test script                                         #
# # Test status will track exit code of last command    #
# # example usage:                                      #
#                                                       #
# # Simple test script example (one condidion):         #
# grep pattern /file                                    #
#                                                       #
#                                                       #
# # Multiple conditions test script example:            #
# status1=$(grep -q pattern1 /file && echo 0 || echo 1) #
# status2=$(grep -q pattern2 /file && echo 0 || echo 1) #
# cat /file                                             #
# [ "$status1" = "0" -a "$status2" = "0" ]              #
#########################################################
EOINSTANCELIST
        nano /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script
        sed -i -e "/^$/d" -e "/^#/d" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script
        echo -e "\e[48;5;6m          \e[K\e[00m"
        break
        fi
        done
    fi
fi

CLOUDS="$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/clouds)"
DEPLOY_SCRIPT="$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/script)"
[ "$TEST" == "1" ] && DEPLOY_TEST_SCRIPT="$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_script)"
[ "$ASYNC" == 1 ] && BACKGROUND='&>/dev/null &'
[ "$BACKUP" == 1 ] && BACKUP_LIST="$(cat /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_list)"
[ "$BACKUP" == 1 -a "$BACKUP_LIST" == "" ] && echoexit1 "BACKUP_LIST is not defined"

OUTPUT_FORMAT_STDERR=$(cat << 'EOUTPUT'
stty rows 50 columns 2000 ; TERM=xterm
PS1='\[\033[01;34m\]\D{%d-%m-%Y %T} \[\e[38;5;172m\]\u\[\033[01;33m\]@\[\033[01;36m\]\H \[\033[01;33m\]\w \[\033[01;35m\]> \[\033[00m\]'
exec 9>&2; exec 8> >(while IFS='' read -e line || [ -n "$line" ]; do printf "\033[31m${line}\033[0m\n"; done)
trap "exec 2>&8;" DEBUG; PROMPT_COMMAND='exec 2>&9;'
END_DEPLOY() { exit &>/dev/null; } ; unset HISTFILE
EOUTPUT
)

OUTPUT_FORMAT=$(cat << 'EOUTPUT'
stty rows 50 columns 2000 ; TERM=xterm
PS1='\[\033[01;34m\]\D{%d-%m-%Y %T} \[\e[38;5;172m\]\u\[\033[01;33m\]@\[\033[01;36m\]\H \[\033[01;33m\]\w \[\033[01;35m\]> \[\033[00m\]'
END_DEPLOY() { exit &>/dev/null; } ; unset HISTFILE
EOUTPUT
)

if [ "$CLD_DEPLOY_OUTPUT" = "bw" ]
then
OUTPUT_FORMAT=$(cat << 'EOUTPUT'
export TERM=xterm-old ; stty rows 50 columns 500 
PS1='\D{%d-%m-%Y %T} \u@\H \w > '
END_DEPLOY() { exit &>/dev/null; } ; unset HISTFILE
EOUTPUT
)
export TERM=xterm-old
elif [ "$CLD_DEPLOY_OUTPUT" = "min" ] 
then
OUTPUT_FORMAT=$(cat << 'EOUTPUT'
export TERM=xterm ; stty rows 50 columns 500
PS1='> '
END_DEPLOY() { exit &>/dev/null; } ; unset HISTFILE
EOUTPUT
)
export TERM=xterm
fi

DEPLOY_INIT=$(cat << EOACTIONVARS
ACTION_PREFIX="${ACTION_PREFIX}"
ACTION_NAME="${ACTION_NAME}"
EOACTIONVARS
)
[ "$SUDO_USER" = "" ] && SUDO_USER=admin

if [ "$RUN" != "1" ]
then
    echo Deploy will affect $(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | wc -w) instances
    cat << EOL

Equivalent non-interactive command after save:
cld-deploy --run --deploy=${DEPLOY}

EOL
    APPROVE_DEPLOY=("Run" "Exit" "Save and exit")
    echo "Run deploy?"
    select APPROVE_CASE in "${APPROVE_DEPLOY[@]}"
    do
        if [ "$APPROVE_CASE" == "Run" ]
        then 
          break
        elif [ "$APPROVE_CASE" == "Exit" ]
        then
          exit 0
        elif [ "$APPROVE_CASE" == "Save and exit" ]
        then
          cp /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/* /var/cld/deploy/deploys/${DEPLOY}/ &>/dev/null
          exit 0
        fi
    done
fi

for VM in $(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}")
do
  CLD_DEPLOY_LOGS

  if [ "$VM" ]
  then
    INSTANCE_GROUP_FUNCS
    echo -e "Deploy started at $VM\e[48;5;6m          \e[K\e[00m"
    $CLD_VARS
#    [ "$BACKGROUND" ] || echo
    [ "$DEBUG" == "1" ] && SHOW_ALL=1 || SHOW_ALL=0
    [ "$DEBUG" == "1" ] && CONNECT_ARGS="-v" || CONNECT_ARGS="-q"
    source <(
    echo "("
    cat << 'EOSOURCE'
[ "$BACKUP_TIMEOUT" ] && TIMEOUT_NOTTY=$BACKUP_TIMEOUT || TIMEOUT_NOTTY=600
[ "$BACKUP" == "1" ] && for DEPLOY_BACKUP_ITTER in $(seq 1 $RETRY)
do
DEPLOY_BACKUP_CHECK_LOG=$(grep -qs "BACKUP_OK" $CLD_ACTION_BACKUP_LOG && echo 0 || echo 1)
if [ "$DEPLOY_BACKUP_CHECK_LOG" != "0" ]
then
$CLD_DEPLOY_NOTTY << EODEPLOYBACKUP | tee -a $CLD_ACTION_BACKUP_LOG
$DEPLOY_INIT
tar zcvf /tmp/backup_${ACTION_NAME}.tar.gz -T <(echo "$BACKUP_LIST") && echo BACKUP_OK || echo BACKUP_FAIL
EODEPLOYBACKUP
DEPLOY_BACKUP_CHECK_LOG=$(grep -qs "BACKUP_OK" $CLD_ACTION_BACKUP_LOG && echo 0 || echo 1)
else
break
fi
done

[ "$BACKUP" == "1" -a "$DEPLOY_BACKUP_CHECK_LOG" != "0" ] && continue
[ "$TIMEOUT" ] || TIMEOUT=3600
for DEPLOY_ITTER in $(seq 1 $RETRY)
do
DEPLOY_CHECK_LOG=$(grep -qs "#BEGIN_DEPLOY" $CLD_ACTION_LOG && echo 0 || echo 1)
if [ "$DEPLOY_CHECK_LOG" == "1" ]
then
$CLD_DEPLOY $CONNECT_ARGS << EODEPLOYRUN | cldtail ${SHOW_ALL} | tee -a $CLD_ACTION_LOG
$OUTPUT_FORMAT
$DEPLOY_INIT
#BEGIN_DEPLOY
$CLD_DEPLOY_VARIABLES
$DEPLOY_SCRIPT
END_DEPLOY
EODEPLOYRUN
else
break
fi
done

[ "$TEST_TIMEOUT" ] && TIMEOUT_NOTTY=$TEST_TIMEOUT || TIMEOUT_NOTTY=600
[ "$TEST" == "1" ] && for DEPLOY_TEST_ITTER in $(seq 1 $RETRY)
do
DEPLOY_TEST_CHECK_LOG=$(grep -qs "[0-9]" $CLD_ACTION_TEST_LOG && echo 0 || echo 1)
if [ "$DEPLOY_TEST_CHECK_LOG" == "1" ]
then
{
$CLD_DEPLOY_NOTTY << EODEPLOYTEST && echo 0 > $CLD_ACTION_TEST_STATUS || echo 1 > $CLD_ACTION_TEST_STATUS
$DEPLOY_INIT
$DEPLOY_TEST_SCRIPT
EODEPLOYTEST
} 2>&1 | tee -a $CLD_ACTION_TEST_LOG
else
break
fi
done
EOSOURCE
    echo ") ${BACKGROUND}"
)
#     [ "$BACKGROUND" ] || echo
     echo -e "Log file: $CLD_ACTION_LOG\e[48;5;6m          \e[K\e[00m"
     echo
     test "$BACKGROUND" && sleep 0.1s
  fi
done
if [ "$BACKGROUND" ]
	then
	    while :; do ps axfu | grep -v grep | grep "tee -a /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/" || DONE=1 ; test "$DONE" == 1 && echo "DONE=1" >> /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/vars && break ; sleep 1s ; done &>/dev/null &
    else
        DONE=1 ; test "$DONE" == 1 && echo "DONE=1" >> /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/vars
fi
[ "$BACKUP" == "1" -a "$ASYNC" == "1" ] && source <(echo "echo Waiting for deploy end before check backups status ; wait")
if [ "$BACKUP" == "1" ]
    then
        AMOUNT_BACKUP_PASSED=$(grep -l "BACKUP_OK" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_log/* | wc -l)
        AMOUNT_INSTANCES=$(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | wc -w)
        if [ "${AMOUNT_BACKUP_PASSED}" == "${AMOUNT_INSTANCES}" ] 
        then 
            echo BACKUP_STATUS=0 > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_log/status
            echo ${AMOUNT_BACKUP_PASSED}/${AMOUNT_INSTANCES} backup completed
            echo
        else
            echo BACKUP_STATUS=1 > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_log/status 
            echo -e "\e[01;31m${AMOUNT_BACKUP_PASSED}\e[00m/${AMOUNT_INSTANCES} backups completed"
            echo
        fi | tee -a  /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/backup_log/status_log
fi
[ "$TEST" == "1" -a "$ASYNC" == "1" ] && source <(echo "echo Waiting for deploy end before check tests status ; wait")
if [ "$TEST" == "1" ]
    then
        if [ "$TEST_PRINT" == "1" ]
        then
            for PRINT_LOG in $(ls /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_log/*)
            do
                TEST_INSTANCE=$(basename "${PRINT_LOG}")
                echo -e "Test script output of $TEST_INSTANCE\e[48;5;6m          \e[K\e[00m"
                if grep -q "^0$" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/${TEST_INSTANCE}
                then
                { echo -en "\033[0;32m" ; cat ${PRINT_LOG} ; echo -e "\e[K\e[00m" ; }
                else
                { echo -en "\033[0;31m" ; cat ${PRINT_LOG} ; echo -e "\e[K\e[00m" ; }
                fi
                echo
            done
        fi
        AMOUNT_TEST_PASSED=$(grep -l "^0$" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/* | wc -l)
        AMOUNT_INSTANCES=$(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | wc -w)
        if [ "${AMOUNT_TEST_PASSED}" == "${AMOUNT_INSTANCES}" ] 
        then 
            echo TEST_STATUS=0 > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/status
            echo ${AMOUNT_TEST_PASSED}/${AMOUNT_INSTANCES} tests passed
        else
            echo TEST_STATUS=1 > /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/status	
            echo -e "\e[01;31m${AMOUNT_TEST_PASSED}\e[00m/${AMOUNT_INSTANCES} tests passed\nFailed deploy logs:"
            # for FAILED_INSTANCE in $(CLOUDS_USER_ALLOWED --groups="${CLD_GROUPS}" | grep "${CLOUDS}" | grep -v "$(grep -l "^1$" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/* | cut -d / -f 8)" || ls /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/ | grep -v "^status$\|^status_log$")
            for FAILED_INSTANCE in $(grep -l "^1$" /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/* | cut -d / -f 9 | grep -v "^status$\|^status_log$\|^test_status$")
            do
            echo "$(du -b /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/deploy_log/${FAILED_INSTANCE} | awk '{print $2" "int($1/1024)"Kb"}')"
            done | sort -k2 -n
        fi | tee -a  /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/test_status/status_log
        echo
fi
[ "$NEXT_DEPLOY" ] && source <(cat << EONEXTDEPLOY
$([ "$NEXT_DEPLOY_WAIT" == "1" ] && echo "echo Waiting for deploy end before start next deploy; echo ; wait")
/var/cld/deploy/bin/cld-deploy --deploy="${NEXT_DEPLOY}" $([ "$NEXT_DEPLOY_ARGS" ] && echo "${NEXT_DEPLOY_ARGS}")
EONEXTDEPLOY
)
[ "$BACKGROUND" ] && disown &>/dev/null
if [ "$RUN" != "1" -a "$CREATE_NEW" != "1" ]
then
    echo "Save this action to deploy?"
    select SAVE_DEPLOY in yes no
    do
    [ "$SAVE_DEPLOY" == "yes" ] && cp /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/* /var/cld/deploy/deploys/${DEPLOY}/ &>/dev/null
    [ "$SAVE_DEPLOY" ] && echo done && break
    done
elif [ "$RUN" != "1" -a "$CREATE_NEW" == "1" ]
then    
    cp /var/cld/deploy/actions/${DEPLOY}/${ACTION_PREFIX}/* /var/cld/deploy/deploys/${DEPLOY}/ &>/dev/null
fi