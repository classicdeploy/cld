#!/bin/bash
source /var/cld/bin/include/cldfuncs
init-load-constants CLD_DOMAIN\|cld.yourdomain.com
init-load-constant --constant=NETWORK_POLICY --example=general --regex="(general|private|paranoid)" --default=general

mkdir /root/sbin/ &>/dev/null
cat > /root/sbin/lets_auto_sign << 'EOCAT'
for DOMAIN in $(grep 'cannot load certificate' /var/log/nginx-ssl-error.log | cut -d '"' -f 2 | cut -d / -f 5 | sort -u)
do
letsencrypt certonly -a webroot -n -m admin@letsgetdomain.com --agree-tos --webroot-path=/usr/share/nginx/html -d ${DOMAIN} ; chmod -R 755 /etc/letsencrypt
done
truncate -s 0 /var/log/nginx-ssl-error.log
EOCAT
chmod 700 /root/sbin/lets_auto_sign

cat > /root/sbin/lets_renew << 'EOCAT'
check_ssl()
{
expr \( `echo|openssl s_client -connect ${DOMAIN}:443 -servername ${DOMAIN} 2>/dev/null|openssl x509 -noout -enddate|cut -d'=' -f2|xargs -I ^ date +%s -d "^"` - `date +%s` \) / 24 / 3600
}

truncate -s 0 /tmp/ssl_domains
for DOMAIN in $(ls  /etc/letsencrypt/live/ | grep -v  README)
do
echo $(check_ssl)_$DOMAIN >> /tmp/ssl_domains
done

cat /tmp/ssl_domains

for EXDOMAIN in $(cat /tmp/ssl_domains | uniq)
do
EXDAYS=$(echo $EXDOMAIN | cut -d _ -f 1)
DOMAIN=$(echo $EXDOMAIN | cut -d _ -f 2)
if [ "$EXDAYS" -lt "30" ]
then
letsencrypt certonly -a webroot -n -m admin@letsgetdomain.com --agree-tos --webroot-path=/usr/share/nginx/html -d ${DOMAIN} ; chmod -R 755 /etc/letsencrypt
fi
done
EOCAT
chmod 700 /root/sbin/lets_renew

cat > /etc/cron.d/lets_auto_gen << 'EOL'
MAILTO=""
* * * * * root /root/sbin/lets_auto_sign
0 14 * * 1 root /root/sbin/lets_renew
EOL

cat > /etc/nginx/sslgen.conf << 'EOL'
listen *:443 ssl http2;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_certificate /etc/letsencrypt/live/$ssl_server_name/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/$ssl_server_name/privkey.pem;
location ^~ /.well-known/acme-challenge/ {
    default_type "text/plain";
    alias /usr/share/nginx/html/.well-known/acme-challenge/;
}
error_log /var/log/nginx-ssl-error.log;
EOL

cat > /etc/nginx/nginx.conf << 'EOL'
worker_rlimit_nofile 30000;
worker_processes auto;
timer_resolution    100ms;
pid /run/nginx.pid;
events {
    worker_connections  10000;
    multi_accept  on;
    use epoll;
}
http {
    include /etc/nginx/mime.types;
    default_type        application/octet-stream;
        log_format      main '$remote_addr - $host [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent"';
        log_format      defaultServer '[$time_local][$server_addr] $remote_addr ($http_user_agent) -> "$http_referer" $host "$request" $status';
        log_format      downloadsLog '[$time_local] $remote_addr "$request"';
        log_format      Counter '[$time_iso8601] $remote_addr $request_uri?$query_string';
    access_log  off;
    error_log /dev/off;
    connection_pool_size  256;
    client_header_buffer_size 4k;
    client_max_body_size  2048m;
    large_client_header_buffers 8 32k;
    request_pool_size 4k;
    output_buffers  1 32k;
    postpone_output 1460;
    map_hash_max_size 2048;
    map_hash_bucket_size 128;
    gzip  on;
    gzip_min_length 1000;
    gzip_proxied  any;
    gzip_types  text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript text/x-javascript application/javascript image/svg+xml svg svgz;
    gzip_disable  "msie6";
    gzip_comp_level 6;
    gzip_http_version 1.0;
    gzip_vary on;
    sendfile       on;
    directio 10m;
    tcp_nopush  on;
    tcp_nodelay on;
    server_tokens off;
    keepalive_timeout 75 20;
    server_names_hash_bucket_size 128;
    server_names_hash_max_size  8192;
    ignore_invalid_headers  on;
    server_name_in_redirect off;
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;
    ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'AES128+EECDH:AES128+EDH';
    ssl_session_cache shared:SSL:50m;
    ssl_prefer_server_ciphers   on;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_buffer_size 8k;
    proxy_buffers 8 64k;
    proxy_connect_timeout 300m;
    proxy_read_timeout  300m;
    proxy_send_timeout  300m;
    proxy_store off;
    proxy_ignore_client_abort on;
    fastcgi_read_timeout  300m;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
    proxy_set_header  Host            $host;
    proxy_set_header  X-Real-IP       $remote_addr;
    proxy_set_header  X-Forwarded-For $remote_addr;
	set_real_ip_from 51.255.66.206/32;
	set_real_ip_from 103.21.244.0/22;
	set_real_ip_from 103.22.200.0/22;
	set_real_ip_from 103.31.4.0/22;
	set_real_ip_from 104.16.0.0/12;
	set_real_ip_from 108.162.192.0/18;
	set_real_ip_from 131.0.72.0/22;
	set_real_ip_from 141.101.64.0/18;
	set_real_ip_from 162.158.0.0/15;
	set_real_ip_from 172.64.0.0/13;
	set_real_ip_from 173.245.48.0/20;
	set_real_ip_from 188.114.96.0/20;
	set_real_ip_from 190.93.240.0/20;
	set_real_ip_from 197.234.240.0/22;
	set_real_ip_from 198.41.128.0/17;
	set_real_ip_from 199.27.128.0/21;
	set_real_ip_from 2400:cb00::/32;
	set_real_ip_from 2606:4700::/32;
	set_real_ip_from 2803:f800::/32;
	set_real_ip_from 2405:b500::/32;
	set_real_ip_from 2405:8100::/32;
	set_real_ip_from 2c0f:f248::/32;
	set_real_ip_from 2a06:98c0::/29;
	real_ip_header X-Forwarded-For;
	include /etc/nginx/conf.d/*.conf;
}
EOL

cat > /etc/nginx/conf.d/cld.conf << EOL
map \$http_upgrade \$connection_upgrade {
default upgrade;
'' close;
}
map \$http_x_forwarded_proto \$real_scheme {
  default \$http_x_forwarded_proto;
  ''      \$scheme;
}
upstream cldweb {
    server        127.0.0.1:8080;
}

upstream cldapi {
    server        127.0.0.1:8085;
}
limit_req_zone \$binary_remote_addr zone=apiall:10m rate=1r/s;
server  {
    listen 80;
    include sslgen.conf;
    access_log /var/log/nginx-main-access.log;
    server_name DOMAIN;

    add_header X-Content-Type-Options nosniff;

    location / {
    if (\$real_scheme = http) {
        return 301 https://\$host\$request_uri;
    }
    include accesslist;
    deny all;
    proxy_pass      http://cldweb;
    proxy_redirect            off;
    proxy_buffering           off;
    proxy_request_buffering   off;
    proxy_http_version        1.1;
    proxy_set_header   Host   \$host;
    proxy_set_header   Upgrade \$http_upgrade;
    proxy_set_header   Connection \$connection_upgrade;
    proxy_set_header   X-Forwarded-For \$remote_addr;
    proxy_set_header   X-Forwarded-Proto \$real_scheme;
    }

    location /api {
    if (\$real_scheme = http) {
        return 301 https://\$host\$request_uri;
    }
    include accesslist;
    deny all;
    rewrite ^/api(.*)$ \$1 break;
    proxy_pass                http://cldapi;
    proxy_redirect            off;
    proxy_buffering           off;
    proxy_request_buffering   off;
    proxy_set_header   Host   \$host;
    proxy_set_header   X-Forwarded-For \$remote_addr;
    proxy_set_header   X-Forwarded-Proto \$real_scheme;
    }

    location /api/all {
$(if [ "${NETWORK_POLICY}" = "paranoid" ]; then
cat << EOPOLICY
    include accesslist;
    deny all;
EOPOLICY
fi)
    include /etc/nginx/deny.conf;
    if (\$real_scheme = http) {
        return 301 https://\$host\$request_uri;
    }
    add_header Access-Control-Allow-Origin *;
    limit_req zone=apiall burst=5 nodelay;
    rewrite ^/api(.*)$ \$1 break;
    proxy_pass                http://cldapi;
    proxy_redirect            off;
    proxy_buffering           off;
    proxy_request_buffering   off;
    proxy_set_header   Host   \$host;
    proxy_set_header   X-Forwarded-For \$remote_addr;
    proxy_set_header   X-Forwarded-Proto \$real_scheme;
    }

    location /documentation {
$(if [ "${NETWORK_POLICY}" = "paranoid" ]; then
cat << EOPOLICY
    include accesslist;
    deny all;
EOPOLICY
fi)
    if (\$real_scheme = http) {
        return 301 https://\$host$request_uri;
    }
    limit_req zone=apiall burst=5 nodelay;
    alias /var/www/cld/doc/;
    }

}
EOL
touch /etc/nginx/accesslist /etc/nginx/deny.conf
systemctl restart nginx
systemctl enable nginx &>/dev/null
{
mkdir -p /etc/letsencrypt/live/
ln -s /etc/ssl/certs/nginx-selfsigned.crt /etc/letsencrypt/live/fullchain.pem
ln -s /etc/ssl/private/nginx-selfsigned.key /etc/letsencrypt/live/privkey.pem
chmod -R 755 /etc/letsencrypt/
} &>/dev/null

for LOOP_FUNC in funcvars_VARS functerm_TERMINAL funcmount_MOUNT funcumount_UMOUNT funcdeploy_DEPLOY funcdeploynotty_DEPLOY_NOTTY
    do
      GROUPFUNC=$(cut -d _ -f 1 <<< ${LOOP_FUNC})
      NAMEFUNC=$(cut -d _ -f 2- <<< ${LOOP_FUNC})
      declare -f EXTERNAL_${NAMEFUNC} | tail -n +3 | head -n -1 | sed 's#^ *##' > /var/cld/access/groups/default/default_${GROUPFUNC}
done